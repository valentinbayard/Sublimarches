{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Calculator,Plus,Trash2,X,Upload,Scissors,Package,Euro,ArrowLeft}from'lucide-react';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const RiserOptimizationApp=()=>{var _projectData$stairs,_projectData$stairs$s;const[projectData,setProjectData]=useState(null);const[showUploadModal,setShowUploadModal]=useState(false);const[optimizationResults,setOptimizationResults]=useState(null);const[isCalculating,setIsCalculating]=useState(false);// Large planks configuration\nconst[largePlanks,setLargePlanks]=useState([{id:1,width:900,height:400,price:7.92,maxQuantity:null,name:'90x40cm'},{id:2,width:1360,height:400,price:11.74,maxQuantity:null,name:'136x40cm'},{id:3,width:1810,height:400,price:17.73,maxQuantity:null,name:'181x40cm'}]);// Saw thickness\nconst[sawThickness,setSawThickness]=useState(10);// Extract risers from project data\nconst risers=(projectData===null||projectData===void 0?void 0:(_projectData$stairs=projectData.stairs)===null||_projectData$stairs===void 0?void 0:(_projectData$stairs$s=_projectData$stairs.steps)===null||_projectData$stairs$s===void 0?void 0:_projectData$stairs$s.map(step=>({id:step.stepNumber,width:step.riserWidth,height:step.height,name:`Contremarche ${step.stepNumber}`,comment:step.comment})))||[];// Debug: log risers when projectData changes\nuseEffect(()=>{if(projectData){console.log('ProjectData mis à jour:',projectData);console.log('Contremarches extraites:',risers);}},[projectData,risers]);// Handle file upload\nconst handleFileUpload=event=>{const file=event.target.files[0];if(file){const reader=new FileReader();reader.onload=e=>{try{const data=JSON.parse(e.target.result);console.log('Fichier importé:',data);if(data.type==='stair-measurement'&&data.stairs&&data.stairs.steps){console.log('Contremarches trouvées:',data.stairs.steps.length);setProjectData(data);setShowUploadModal(false);}else{console.error('Structure de fichier invalide:',data);alert('Fichier invalide. Veuillez utiliser un fichier exporté depuis l\\'étape 1.\\n\\nStructure attendue: fichier JSON avec type=\"stair-measurement\" et données des marches.');}}catch(error){console.error('Erreur de parsing JSON:',error);alert('Erreur lors de la lecture du fichier JSON: '+error.message);}};reader.readAsText(file);}};// Add new plank\nconst addNewPlank=()=>{const newId=Math.max(...largePlanks.map(p=>p.id),0)+1;setLargePlanks(prev=>[...prev,{id:newId,width:1000,height:400,price:10.00,maxQuantity:null,name:'100x40cm'}]);};// Delete plank\nconst deletePlank=id=>{setLargePlanks(prev=>prev.filter(p=>p.id!==id));};// Generate plank name\nconst generatePlankName=(width,height)=>{return`${Math.round(width/10)}x${Math.round(height/10)}cm`;};// Optimization algorithm\nconst optimizeCutting=()=>{if(risers.length===0){alert('Aucune contremarche à optimiser !');return;}setIsCalculating(true);// Simulate calculation time\nsetTimeout(()=>{const solution=calculateOptimalCutting(risers,sawThickness);setOptimizationResults(solution);setIsCalculating(false);},1500);};// Calculate optimal cutting arrangement\nconst calculateOptimalCutting=(pieces,sawThickness)=>{const solution=[];let remainingPieces=pieces.map((piece,index)=>({...piece,instanceId:`piece-${piece.id}`,name:`${piece.id}`,originalIndex:index}));const plankUsage={};largePlanks.forEach(plank=>{plankUsage[plank.id]=0;});let totalCost=0;let totalPlanks=0;while(remainingPieces.length>0){let bestOption=null;let bestEfficiency=0;// Test each plank type\nfor(const plankType of largePlanks){if(plankType.maxQuantity&&plankUsage[plankType.id]>=plankType.maxQuantity){continue;}const arrangement=calculateBestArrangement(remainingPieces,plankType,sawThickness);const costPerArea=plankType.price/(plankType.width*plankType.height);const efficiency=arrangement.efficiency/costPerArea;if(efficiency>bestEfficiency&&arrangement.pieces.length>0){bestEfficiency=efficiency;bestOption={plankType,arrangement,costPerArea};}}if(bestOption){solution.push(bestOption);plankUsage[bestOption.plankType.id]++;totalCost+=bestOption.plankType.price;totalPlanks++;// Remove used pieces\nremainingPieces=remainingPieces.filter(piece=>!bestOption.arrangement.pieces.some(used=>used.instanceId===piece.instanceId));}else{// If no piece can be placed, try with available planks\nconst piece=remainingPieces[0];const availablePlanks=largePlanks.filter(plank=>!plank.maxQuantity||plankUsage[plank.id]<plank.maxQuantity);const suitablePlank=availablePlanks.find(plank=>{const fitNormal=piece.width<=plank.width&&piece.height<=plank.height;const fitRotated=piece.height<=plank.width&&piece.width<=plank.height;return fitNormal||fitRotated;});if(suitablePlank){const rotated=!(piece.width<=suitablePlank.width&&piece.height<=suitablePlank.height);solution.push({plankType:suitablePlank,arrangement:{pieces:[{...piece,rotated,x:0,y:0,displayWidth:rotated?piece.height:piece.width,displayHeight:rotated?piece.width:piece.height}],efficiency:piece.width*piece.height/(suitablePlank.width*suitablePlank.height)}});plankUsage[suitablePlank.id]++;totalCost+=suitablePlank.price;totalPlanks++;remainingPieces.shift();}else{break;}}}return{solution,totalCost,totalPlanks,remainingPieces,efficiency:solution.reduce((sum,item)=>sum+item.arrangement.efficiency,0)/solution.length};};// Calculate best arrangement for a plank\nconst calculateBestArrangement=(pieces,plankType,sawThickness)=>{const arrangements=[];// Try different piece combinations\nfor(let i=1;i<=Math.min(pieces.length,10);i++){const combinations=getCombinations(pieces,i);for(const combination of combinations){const arrangement=placePieces(combination,plankType,sawThickness);if(arrangement.pieces.length>0){const totalArea=arrangement.pieces.reduce((sum,piece)=>sum+piece.width*piece.height,0);arrangement.totalValue=totalArea;arrangement.efficiency=totalArea/(plankType.width*plankType.height);arrangements.push(arrangement);}}}return arrangements.reduce((best,current)=>current.totalValue>best.totalValue?current:best,{pieces:[],totalValue:0,efficiency:0});};// Get combinations of pieces\nconst getCombinations=(pieces,size)=>{if(size===1)return pieces.map(p=>[p]);if(size===pieces.length)return[pieces];const combinations=[];for(let i=0;i<=pieces.length-size;i++){const head=pieces[i];const tailCombinations=getCombinations(pieces.slice(i+1),size-1);for(const tail of tailCombinations){combinations.push([head,...tail]);}}return combinations;};// Place pieces on a plank\nconst placePieces=(pieces,plankType,sawThickness)=>{const placedPieces=[];for(const piece of pieces){const position=findBestPosition(piece,placedPieces,plankType,sawThickness);if(position){const rotated=position.rotated;placedPieces.push({...piece,x:position.x,y:position.y,rotated,displayWidth:rotated?piece.height:piece.width,displayHeight:rotated?piece.width:piece.height});}}return{pieces:placedPieces};};// Find best position for a piece\nconst findBestPosition=(piece,placedPieces,plankType,sawThickness)=>{const positions=[];// Try normal orientation\nif(piece.width<=plankType.width&&piece.height<=plankType.height){positions.push({x:0,y:0,rotated:false});}// Try rotated orientation\nif(piece.height<=plankType.width&&piece.width<=plankType.height){positions.push({x:0,y:0,rotated:true});}// Add positions near existing pieces\nfor(const existing of placedPieces){const rightPos={x:existing.x+existing.displayWidth+sawThickness,y:existing.y,rotated:false};const bottomPos={x:existing.x,y:existing.y+existing.displayHeight+sawThickness,rotated:false};positions.push(rightPos,bottomPos);}// Sort positions by x then y\npositions.sort((a,b)=>a.x-b.x||a.y-b.y);// Test each position\nfor(const pos of positions){if(canPlaceAt(piece,pos,placedPieces,plankType,sawThickness)){return pos;}}return null;};// Check if piece can be placed at position\nconst canPlaceAt=(piece,position,placedPieces,plankType,sawThickness)=>{const width=position.rotated?piece.height:piece.width;const height=position.rotated?piece.width:piece.height;// Check plank boundaries\nif(position.x+width>plankType.width||position.y+height>plankType.height){return false;}// Check collisions with existing pieces\nfor(const existing of placedPieces){if(!(position.x>=existing.x+existing.displayWidth+sawThickness||position.x+width+sawThickness<=existing.x||position.y>=existing.y+existing.displayHeight+sawThickness||position.y+height+sawThickness<=existing.y)){return false;}}return true;};// Generate plank summary\nconst generatePlankSummary=solution=>{const summary={};solution.solution.forEach(item=>{const plankName=generatePlankName(item.plankType.width,item.plankType.height);if(!summary[plankName]){summary[plankName]={count:0,price:item.plankType.price,dimensions:`${item.plankType.width}×${item.plankType.height}mm`};}summary[plankName].count++;});return Object.entries(summary).map(_ref=>{let[name,data]=_ref;return/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center p-2 bg-white rounded border\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-medium\",children:name}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-sm text-gray-600 ml-2\",children:[\"(\",data.dimensions,\")\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-right\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"font-semibold text-blue-600\",children:[data.count,\" planche\",data.count>1?'s':'']}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-gray-600\",children:[data.count,\" \\xD7 \",data.price,\"\\u20AC = \",(data.count*data.price).toFixed(2),\"\\u20AC\"]})]})]},name);});};// Generate plank visualization\nconst generatePlankVisualization=(item,index)=>{const plankType=item.plankType;const arrangement=item.arrangement;// Calculate scale to maintain real proportions\nconst maxDisplayWidth=400;const maxDisplayHeight=200;const scaleX=maxDisplayWidth/plankType.width;const scaleY=maxDisplayHeight/plankType.height;const scale=Math.min(scaleX,scaleY);const displayWidth=plankType.width*scale;const displayHeight=plankType.height*scale;const colors=['bg-blue-300','bg-green-300','bg-red-300','bg-purple-300','bg-yellow-300','bg-pink-300','bg-indigo-300','bg-orange-300'];return/*#__PURE__*/_jsxs(\"div\",{className:\"border border-gray-300 p-4 bg-amber-50\",children:[/*#__PURE__*/_jsxs(\"h4\",{className:\"font-semibold mb-2\",children:[generatePlankName(plankType.width,plankType.height),\" - \",plankType.price,\"\\u20AC\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center\",children:/*#__PURE__*/_jsx(\"div\",{className:\"relative border-2 border-amber-800 bg-amber-100\",style:{width:displayWidth,height:displayHeight},children:arrangement.pieces.map((piece,pieceIndex)=>{const color=colors[piece.originalIndex%colors.length];return/*#__PURE__*/_jsx(\"div\",{className:`absolute border border-gray-700 ${color} flex items-center justify-center text-xs font-bold shadow-sm`,style:{width:piece.displayWidth*scale,height:piece.displayHeight*scale,left:piece.x*scale,top:piece.y*scale},children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center leading-tight\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-bold\",children:piece.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs\",children:[piece.width,\"\\xD7\",piece.height]}),piece.rotated&&/*#__PURE__*/_jsx(\"div\",{className:\"text-xs\",children:\"\\u21BB\"})]})},pieceIndex);})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2 text-sm text-gray-600 text-center\",children:[\"Pi\\xE8ces: \",arrangement.pieces.length,\" | Efficacit\\xE9: \",(arrangement.efficiency*100).toFixed(1),\"%\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-1 text-xs text-gray-500 text-center\",children:[\"Dimensions: \",plankType.width,\"\\xD7\",plankType.height,\"mm | \\xC9chelle: 1:\",Math.round(1/scale)]})]},index);};return/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-6xl mx-auto p-6 bg-white min-h-screen\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-6\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center gap-4 mb-2\",children:/*#__PURE__*/_jsxs(\"a\",{href:\"/Sublimarches/optimiseur/mesures/\",className:\"flex items-center gap-2 text-blue-600 hover:text-blue-800 text-sm\",children:[/*#__PURE__*/_jsx(ArrowLeft,{className:\"w-4 h-4\"}),\"Retour \\xE0 l'\\xE9tape 1\"]})}),/*#__PURE__*/_jsxs(\"h1\",{className:\"text-3xl font-bold text-gray-800 mb-2 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Scissors,{className:\"text-blue-600\"}),\"Optimisation des Contremarches\"]}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600\",children:\"\\xC9tape 2/3 : Optimisez la d\\xE9coupe des contremarches sur les grandes planches\"})]}),!projectData&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-blue-50 p-6 rounded-lg mb-6 text-center\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"font-semibold text-blue-800 mb-4 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Upload,{className:\"w-5 h-5\"}),\"Importer les mesures de l'\\xE9tape 1\"]}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600 mb-4\",children:\"Uploadez le fichier JSON export\\xE9 depuis l'\\xE9tape 1 pour commencer l'optimisation\"}),/*#__PURE__*/_jsxs(\"button\",{onClick:()=>setShowUploadModal(true),className:\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2 mx-auto\",children:[/*#__PURE__*/_jsx(Upload,{className:\"w-5 h-5\"}),\"Choisir un fichier JSON\"]})]}),projectData&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-green-50 p-4 rounded-lg mb-6\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"font-semibold text-green-800 mb-3 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Package,{className:\"w-5 h-5\"}),\"Projet : \",projectData.project.name]}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-green-600\",children:risers.length}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-600\",children:\"Contremarches\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-blue-600\",children:(risers.reduce((sum,r)=>sum+r.width*r.height,0)/1000000).toFixed(2)}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-600\",children:\"m\\xB2 total\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-purple-600\",children:Math.max(...risers.map(r=>r.width))}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-600\",children:\"Largeur max (mm)\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-orange-600\",children:Math.max(...risers.map(r=>r.height))}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-600\",children:\"Hauteur max (mm)\"})]})]})]}),projectData&&/*#__PURE__*/_jsxs(\"div\",{className:\"grid md:grid-cols-2 gap-6 mb-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gray-50 p-4 rounded-lg\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"font-semibold text-gray-800 mb-3\",children:\"Param\\xE8tres g\\xE9n\\xE9raux\"}),/*#__PURE__*/_jsx(\"div\",{className:\"space-y-3\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-700 mb-1\",children:\"Largeur de scie (mm)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:sawThickness,onChange:e=>setSawThickness(parseInt(e.target.value)||10),min:\"0\",max:\"50\",className:\"w-full p-2 border border-gray-300 rounded-md\"})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-blue-50 p-4 rounded-lg\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-3\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"font-semibold text-blue-800 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Package,{className:\"w-5 h-5\"}),\"Grandes planches disponibles\"]}),/*#__PURE__*/_jsxs(\"button\",{onClick:addNewPlank,className:\"px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 flex items-center gap-1\",children:[/*#__PURE__*/_jsx(Plus,{className:\"w-4 h-4\"}),\"Ajouter\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"space-y-2\",children:largePlanks.map(plank=>/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between p-2 bg-white rounded border\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex-1\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-medium\",children:generatePlankName(plank.width,plank.height)}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-gray-600\",children:[plank.width,\"\\xD7\",plank.height,\"mm - \",plank.price,\"\\u20AC\",plank.maxQuantity?` (max: ${plank.maxQuantity})`:'']})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex gap-1\",children:/*#__PURE__*/_jsx(\"button\",{onClick:()=>deletePlank(plank.id),className:\"p-1 text-red-600 hover:bg-red-100 rounded\",children:/*#__PURE__*/_jsx(Trash2,{className:\"w-4 h-4\"})})})]},plank.id))})]})]}),projectData&&/*#__PURE__*/_jsx(\"div\",{className:\"text-center mb-6\",children:/*#__PURE__*/_jsx(\"button\",{onClick:optimizeCutting,disabled:isCalculating||risers.length===0,className:\"px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 mx-auto text-lg font-semibold\",children:isCalculating?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"}),\"Calcul en cours...\"]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Calculator,{className:\"w-5 h-5\"}),\"Calculer l'optimisation\"]})})}),optimizationResults&&/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-green-100 p-4 rounded-lg\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"font-semibold text-green-800 mb-2 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Euro,{className:\"w-5 h-5\"}),\"R\\xE9sultat de l'optimisation\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid md:grid-cols-3 gap-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-2xl font-bold text-green-600\",children:[optimizationResults.totalCost.toFixed(2),\"\\u20AC\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-600\",children:\"Co\\xFBt total\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-blue-600\",children:optimizationResults.totalPlanks}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-600\",children:\"Grandes planches\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-purple-600\",children:risers.length-optimizationResults.remainingPieces.length}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-600\",children:\"Contremarches plac\\xE9es\"})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-blue-50 p-4 rounded-lg\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"font-semibold text-blue-800 mb-3 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Package,{className:\"w-5 h-5\"}),\"R\\xE9capitulatif des planches \\xE0 commander\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-2\",children:[generatePlankSummary(optimizationResults),/*#__PURE__*/_jsx(\"div\",{className:\"border-t pt-2 mt-3\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center font-bold text-lg\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Total \\xE0 commander :\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-blue-600\",children:[optimizationResults.totalCost.toFixed(2),\"\\u20AC\"]})]})})]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{className:\"font-semibold text-gray-800 mb-4\",children:\"Plan de d\\xE9coupe d\\xE9taill\\xE9\"}),/*#__PURE__*/_jsx(\"div\",{className:\"space-y-4\",children:optimizationResults.solution.map((item,index)=>generatePlankVisualization(item,index))})]}),optimizationResults.remainingPieces.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-red-50 p-4 rounded-lg\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"font-semibold text-red-800 mb-2\",children:[\"Contremarches non plac\\xE9es (\",optimizationResults.remainingPieces.length,\")\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-red-600\",children:optimizationResults.remainingPieces.map(p=>p.name).join(', ')})]})]}),showUploadModal&&/*#__PURE__*/_jsx(\"div\",{className:\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-6 rounded-lg max-w-md w-full mx-4\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold mb-4 text-blue-800\",children:\"Importer les mesures\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"mb-4\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-700 mb-2\",children:\"Fichier JSON de l'\\xE9tape 1\"}),/*#__PURE__*/_jsx(\"input\",{type:\"file\",accept:\".json\",onChange:handleFileUpload,className:\"w-full p-2 border border-gray-300 rounded-md\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-end gap-2\",children:/*#__PURE__*/_jsxs(\"button\",{onClick:()=>setShowUploadModal(false),className:\"px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-md flex items-center gap-2\",children:[/*#__PURE__*/_jsx(X,{className:\"w-4 h-4\"}),\"Annuler\"]})})]})}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-8 bg-blue-50 p-4 rounded-lg\",children:[/*#__PURE__*/_jsx(\"h4\",{className:\"font-semibold text-blue-800 mb-2\",children:\"\\uD83D\\uDCCB Instructions\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-blue-700 space-y-1\",children:[/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"1.\"}),\" Importez le fichier JSON export\\xE9 depuis l'\\xE9tape 1\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"2.\"}),\" Ajustez les param\\xE8tres de scie et les grandes planches disponibles\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"3.\"}),\" Lancez l'optimisation pour obtenir le plan de d\\xE9coupe optimal\"]}),/*#__PURE__*/_jsxs(\"p\",{children:[/*#__PURE__*/_jsx(\"strong\",{children:\"4.\"}),\" Visualisez les r\\xE9sultats et le co\\xFBt total\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"mt-3 text-xs text-blue-600\",children:\"L'algorithme optimise pour le co\\xFBt total en tenant compte de l'efficacit\\xE9 de d\\xE9coupe et des prix des planches.\"})]})]});};export default RiserOptimizationApp;","map":{"version":3,"names":["React","useState","useEffect","Calculator","Plus","Trash2","X","Upload","Scissors","Package","Euro","ArrowLeft","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","RiserOptimizationApp","_projectData$stairs","_projectData$stairs$s","projectData","setProjectData","showUploadModal","setShowUploadModal","optimizationResults","setOptimizationResults","isCalculating","setIsCalculating","largePlanks","setLargePlanks","id","width","height","price","maxQuantity","name","sawThickness","setSawThickness","risers","stairs","steps","map","step","stepNumber","riserWidth","comment","console","log","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","data","JSON","parse","result","type","length","error","alert","message","readAsText","addNewPlank","newId","Math","max","p","prev","deletePlank","filter","generatePlankName","round","optimizeCutting","setTimeout","solution","calculateOptimalCutting","pieces","remainingPieces","piece","index","instanceId","originalIndex","plankUsage","forEach","plank","totalCost","totalPlanks","bestOption","bestEfficiency","plankType","arrangement","calculateBestArrangement","costPerArea","efficiency","push","some","used","availablePlanks","suitablePlank","find","fitNormal","fitRotated","rotated","x","y","displayWidth","displayHeight","shift","reduce","sum","item","arrangements","i","min","combinations","getCombinations","combination","placePieces","totalArea","totalValue","best","current","size","head","tailCombinations","slice","tail","placedPieces","position","findBestPosition","positions","existing","rightPos","bottomPos","sort","a","b","pos","canPlaceAt","generatePlankSummary","summary","plankName","count","dimensions","Object","entries","_ref","className","children","toFixed","generatePlankVisualization","maxDisplayWidth","maxDisplayHeight","scaleX","scaleY","scale","colors","style","pieceIndex","color","left","top","href","onClick","project","r","value","onChange","parseInt","disabled","join","accept"],"sources":["/Users/valentinbayard/Sublimarches/Sublimarches/optimiseur/contremarches/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Calculator, Plus, Trash2, X, Upload, Scissors, Package, Euro, ArrowLeft } from 'lucide-react';\n\nconst RiserOptimizationApp = () => {\n  const [projectData, setProjectData] = useState(null);\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const [optimizationResults, setOptimizationResults] = useState(null);\n  const [isCalculating, setIsCalculating] = useState(false);\n  \n  // Large planks configuration\n  const [largePlanks, setLargePlanks] = useState([\n    { id: 1, width: 900, height: 400, price: 7.92, maxQuantity: null, name: '90x40cm' },\n    { id: 2, width: 1360, height: 400, price: 11.74, maxQuantity: null, name: '136x40cm' },\n    { id: 3, width: 1810, height: 400, price: 17.73, maxQuantity: null, name: '181x40cm' }\n  ]);\n\n  // Saw thickness\n  const [sawThickness, setSawThickness] = useState(10);\n\n  // Extract risers from project data\n  const risers = projectData?.stairs?.steps?.map(step => ({\n    id: step.stepNumber,\n    width: step.riserWidth,\n    height: step.height,\n    name: `Contremarche ${step.stepNumber}`,\n    comment: step.comment\n  })) || [];\n  \n  // Debug: log risers when projectData changes\n  useEffect(() => {\n    if (projectData) {\n      console.log('ProjectData mis à jour:', projectData);\n      console.log('Contremarches extraites:', risers);\n    }\n  }, [projectData, risers]);\n\n  // Handle file upload\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const data = JSON.parse(e.target.result);\n          console.log('Fichier importé:', data);\n          \n          if (data.type === 'stair-measurement' && data.stairs && data.stairs.steps) {\n            console.log('Contremarches trouvées:', data.stairs.steps.length);\n            setProjectData(data);\n            setShowUploadModal(false);\n          } else {\n            console.error('Structure de fichier invalide:', data);\n            alert('Fichier invalide. Veuillez utiliser un fichier exporté depuis l\\'étape 1.\\n\\nStructure attendue: fichier JSON avec type=\"stair-measurement\" et données des marches.');\n          }\n        } catch (error) {\n          console.error('Erreur de parsing JSON:', error);\n          alert('Erreur lors de la lecture du fichier JSON: ' + error.message);\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  // Add new plank\n  const addNewPlank = () => {\n    const newId = Math.max(...largePlanks.map(p => p.id), 0) + 1;\n    setLargePlanks(prev => [...prev, {\n      id: newId,\n      width: 1000,\n      height: 400,\n      price: 10.00,\n      maxQuantity: null,\n      name: '100x40cm'\n    }]);\n  };\n\n  // Delete plank\n  const deletePlank = (id) => {\n    setLargePlanks(prev => prev.filter(p => p.id !== id));\n  };\n\n  // Generate plank name\n  const generatePlankName = (width, height) => {\n    return `${Math.round(width/10)}x${Math.round(height/10)}cm`;\n  };\n\n  // Optimization algorithm\n  const optimizeCutting = () => {\n    if (risers.length === 0) {\n      alert('Aucune contremarche à optimiser !');\n      return;\n    }\n\n    setIsCalculating(true);\n\n    // Simulate calculation time\n    setTimeout(() => {\n      const solution = calculateOptimalCutting(risers, sawThickness);\n      setOptimizationResults(solution);\n      setIsCalculating(false);\n    }, 1500);\n  };\n\n  // Calculate optimal cutting arrangement\n  const calculateOptimalCutting = (pieces, sawThickness) => {\n    const solution = [];\n    let remainingPieces = pieces.map((piece, index) => ({\n      ...piece,\n      instanceId: `piece-${piece.id}`,\n      name: `${piece.id}`,\n      originalIndex: index\n    }));\n    \n    const plankUsage = {};\n    largePlanks.forEach(plank => {\n      plankUsage[plank.id] = 0;\n    });\n\n    let totalCost = 0;\n    let totalPlanks = 0;\n\n    while (remainingPieces.length > 0) {\n      let bestOption = null;\n      let bestEfficiency = 0;\n      \n      // Test each plank type\n      for (const plankType of largePlanks) {\n        if (plankType.maxQuantity && plankUsage[plankType.id] >= plankType.maxQuantity) {\n          continue;\n        }\n        \n        const arrangement = calculateBestArrangement(remainingPieces, plankType, sawThickness);\n        const costPerArea = plankType.price / (plankType.width * plankType.height);\n        const efficiency = arrangement.efficiency / costPerArea;\n        \n        if (efficiency > bestEfficiency && arrangement.pieces.length > 0) {\n          bestEfficiency = efficiency;\n          bestOption = {\n            plankType,\n            arrangement,\n            costPerArea\n          };\n        }\n      }\n      \n      if (bestOption) {\n        solution.push(bestOption);\n        plankUsage[bestOption.plankType.id]++;\n        totalCost += bestOption.plankType.price;\n        totalPlanks++;\n        \n        // Remove used pieces\n        remainingPieces = remainingPieces.filter(piece => \n          !bestOption.arrangement.pieces.some(used => used.instanceId === piece.instanceId)\n        );\n      } else {\n        // If no piece can be placed, try with available planks\n        const piece = remainingPieces[0];\n        const availablePlanks = largePlanks.filter(plank => \n          !plank.maxQuantity || plankUsage[plank.id] < plank.maxQuantity\n        );\n        \n        const suitablePlank = availablePlanks.find(plank => {\n          const fitNormal = piece.width <= plank.width && piece.height <= plank.height;\n          const fitRotated = piece.height <= plank.width && piece.width <= plank.height;\n          return fitNormal || fitRotated;\n        });\n        \n        if (suitablePlank) {\n          const rotated = !(piece.width <= suitablePlank.width && piece.height <= suitablePlank.height);\n          solution.push({\n            plankType: suitablePlank,\n            arrangement: { \n              pieces: [{\n                ...piece,\n                rotated,\n                x: 0,\n                y: 0,\n                displayWidth: rotated ? piece.height : piece.width,\n                displayHeight: rotated ? piece.width : piece.height\n              }],\n              efficiency: (piece.width * piece.height) / (suitablePlank.width * suitablePlank.height)\n            }\n          });\n          plankUsage[suitablePlank.id]++;\n          totalCost += suitablePlank.price;\n          totalPlanks++;\n          remainingPieces.shift();\n        } else {\n          break;\n        }\n      }\n    }\n\n    return {\n      solution,\n      totalCost,\n      totalPlanks,\n      remainingPieces,\n      efficiency: solution.reduce((sum, item) => sum + item.arrangement.efficiency, 0) / solution.length\n    };\n  };\n\n  // Calculate best arrangement for a plank\n  const calculateBestArrangement = (pieces, plankType, sawThickness) => {\n    const arrangements = [];\n    \n    // Try different piece combinations\n    for (let i = 1; i <= Math.min(pieces.length, 10); i++) {\n      const combinations = getCombinations(pieces, i);\n      \n      for (const combination of combinations) {\n        const arrangement = placePieces(combination, plankType, sawThickness);\n        if (arrangement.pieces.length > 0) {\n          const totalArea = arrangement.pieces.reduce((sum, piece) => \n            sum + (piece.width * piece.height), 0\n          );\n          arrangement.totalValue = totalArea;\n          arrangement.efficiency = totalArea / (plankType.width * plankType.height);\n          arrangements.push(arrangement);\n        }\n      }\n    }\n    \n    return arrangements.reduce((best, current) => \n      current.totalValue > best.totalValue ? current : best\n    , { pieces: [], totalValue: 0, efficiency: 0 });\n  };\n\n  // Get combinations of pieces\n  const getCombinations = (pieces, size) => {\n    if (size === 1) return pieces.map(p => [p]);\n    if (size === pieces.length) return [pieces];\n    \n    const combinations = [];\n    for (let i = 0; i <= pieces.length - size; i++) {\n      const head = pieces[i];\n      const tailCombinations = getCombinations(pieces.slice(i + 1), size - 1);\n      for (const tail of tailCombinations) {\n        combinations.push([head, ...tail]);\n      }\n    }\n    return combinations;\n  };\n\n  // Place pieces on a plank\n  const placePieces = (pieces, plankType, sawThickness) => {\n    const placedPieces = [];\n    \n    for (const piece of pieces) {\n      const position = findBestPosition(piece, placedPieces, plankType, sawThickness);\n      if (position) {\n        const rotated = position.rotated;\n        placedPieces.push({\n          ...piece,\n          x: position.x,\n          y: position.y,\n          rotated,\n          displayWidth: rotated ? piece.height : piece.width,\n          displayHeight: rotated ? piece.width : piece.height\n        });\n      }\n    }\n    \n    return { pieces: placedPieces };\n  };\n\n  // Find best position for a piece\n  const findBestPosition = (piece, placedPieces, plankType, sawThickness) => {\n    const positions = [];\n    \n    // Try normal orientation\n    if (piece.width <= plankType.width && piece.height <= plankType.height) {\n      positions.push({ x: 0, y: 0, rotated: false });\n    }\n    \n    // Try rotated orientation\n    if (piece.height <= plankType.width && piece.width <= plankType.height) {\n      positions.push({ x: 0, y: 0, rotated: true });\n    }\n    \n    // Add positions near existing pieces\n    for (const existing of placedPieces) {\n      const rightPos = { x: existing.x + existing.displayWidth + sawThickness, y: existing.y, rotated: false };\n      const bottomPos = { x: existing.x, y: existing.y + existing.displayHeight + sawThickness, rotated: false };\n      positions.push(rightPos, bottomPos);\n    }\n    \n    // Sort positions by x then y\n    positions.sort((a, b) => a.x - b.x || a.y - b.y);\n    \n    // Test each position\n    for (const pos of positions) {\n      if (canPlaceAt(piece, pos, placedPieces, plankType, sawThickness)) {\n        return pos;\n      }\n    }\n    \n    return null;\n  };\n\n  // Check if piece can be placed at position\n  const canPlaceAt = (piece, position, placedPieces, plankType, sawThickness) => {\n    const width = position.rotated ? piece.height : piece.width;\n    const height = position.rotated ? piece.width : piece.height;\n    \n    // Check plank boundaries\n    if (position.x + width > plankType.width || position.y + height > plankType.height) {\n      return false;\n    }\n    \n    // Check collisions with existing pieces\n    for (const existing of placedPieces) {\n      if (!(position.x >= existing.x + existing.displayWidth + sawThickness ||\n            position.x + width + sawThickness <= existing.x ||\n            position.y >= existing.y + existing.displayHeight + sawThickness ||\n            position.y + height + sawThickness <= existing.y)) {\n        return false;\n      }\n    }\n    \n    return true;\n  };\n\n  // Generate plank summary\n  const generatePlankSummary = (solution) => {\n    const summary = {};\n    solution.solution.forEach(item => {\n      const plankName = generatePlankName(item.plankType.width, item.plankType.height);\n      if (!summary[plankName]) {\n        summary[plankName] = { \n          count: 0, \n          price: item.plankType.price, \n          dimensions: `${item.plankType.width}×${item.plankType.height}mm` \n        };\n      }\n      summary[plankName].count++;\n    });\n\n    return Object.entries(summary).map(([name, data]) => (\n      <div key={name} className=\"flex justify-between items-center p-2 bg-white rounded border\">\n        <div>\n          <span className=\"font-medium\">{name}</span>\n          <span className=\"text-sm text-gray-600 ml-2\">({data.dimensions})</span>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"font-semibold text-blue-600\">\n            {data.count} planche{data.count > 1 ? 's' : ''}\n          </div>\n          <div className=\"text-sm text-gray-600\">\n            {data.count} × {data.price}€ = {(data.count * data.price).toFixed(2)}€\n          </div>\n        </div>\n      </div>\n    ));\n  };\n\n  // Generate plank visualization\n  const generatePlankVisualization = (item, index) => {\n    const plankType = item.plankType;\n    const arrangement = item.arrangement;\n    \n    // Calculate scale to maintain real proportions\n    const maxDisplayWidth = 400;\n    const maxDisplayHeight = 200;\n    const scaleX = maxDisplayWidth / plankType.width;\n    const scaleY = maxDisplayHeight / plankType.height;\n    const scale = Math.min(scaleX, scaleY);\n    \n    const displayWidth = plankType.width * scale;\n    const displayHeight = plankType.height * scale;\n    \n    const colors = ['bg-blue-300', 'bg-green-300', 'bg-red-300', 'bg-purple-300', 'bg-yellow-300', 'bg-pink-300', 'bg-indigo-300', 'bg-orange-300'];\n    \n    return (\n      <div key={index} className=\"border border-gray-300 p-4 bg-amber-50\">\n        <h4 className=\"font-semibold mb-2\">{generatePlankName(plankType.width, plankType.height)} - {plankType.price}€</h4>\n        <div className=\"flex justify-center\">\n          <div \n            className=\"relative border-2 border-amber-800 bg-amber-100\" \n            style={{ width: displayWidth, height: displayHeight }}\n          >\n            {arrangement.pieces.map((piece, pieceIndex) => {\n              const color = colors[piece.originalIndex % colors.length];\n              return (\n                <div \n                  key={pieceIndex}\n                  className={`absolute border border-gray-700 ${color} flex items-center justify-center text-xs font-bold shadow-sm`}\n                  style={{\n                    width: piece.displayWidth * scale,\n                    height: piece.displayHeight * scale,\n                    left: piece.x * scale,\n                    top: piece.y * scale\n                  }}\n                >\n                  <div className=\"text-center leading-tight\">\n                    <div className=\"font-bold\">{piece.name}</div>\n                    <div className=\"text-xs\">{piece.width}×{piece.height}</div>\n                    {piece.rotated && <div className=\"text-xs\">↻</div>}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"mt-2 text-sm text-gray-600 text-center\">\n          Pièces: {arrangement.pieces.length} | \n          Efficacité: {(arrangement.efficiency * 100).toFixed(1)}%\n        </div>\n        <div className=\"mt-1 text-xs text-gray-500 text-center\">\n          Dimensions: {plankType.width}×{plankType.height}mm | Échelle: 1:{Math.round(1/scale)}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 bg-white min-h-screen\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center gap-4 mb-2\">\n          <a \n            href=\"/Sublimarches/optimiseur/mesures/\" \n            className=\"flex items-center gap-2 text-blue-600 hover:text-blue-800 text-sm\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Retour à l'étape 1\n          </a>\n        </div>\n        <h1 className=\"text-3xl font-bold text-gray-800 mb-2 flex items-center gap-2\">\n          <Scissors className=\"text-blue-600\" />\n          Optimisation des Contremarches\n        </h1>\n        <p className=\"text-gray-600\">\n          Étape 2/3 : Optimisez la découpe des contremarches sur les grandes planches\n        </p>\n      </div>\n\n      {/* File Upload Section */}\n      {!projectData && (\n        <div className=\"bg-blue-50 p-6 rounded-lg mb-6 text-center\">\n          <h3 className=\"font-semibold text-blue-800 mb-4 flex items-center gap-2\">\n            <Upload className=\"w-5 h-5\" />\n            Importer les mesures de l'étape 1\n          </h3>\n          <p className=\"text-gray-600 mb-4\">\n            Uploadez le fichier JSON exporté depuis l'étape 1 pour commencer l'optimisation\n          </p>\n          <button\n            onClick={() => setShowUploadModal(true)}\n            className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2 mx-auto\"\n          >\n            <Upload className=\"w-5 h-5\" />\n            Choisir un fichier JSON\n          </button>\n        </div>\n      )}\n\n      {/* Project Info */}\n      {projectData && (\n        <div className=\"bg-green-50 p-4 rounded-lg mb-6\">\n          <h3 className=\"font-semibold text-green-800 mb-3 flex items-center gap-2\">\n            <Package className=\"w-5 h-5\" />\n            Projet : {projectData.project.name}\n          </h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-green-600\">{risers.length}</div>\n              <div className=\"text-sm text-gray-600\">Contremarches</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {(risers.reduce((sum, r) => sum + (r.width * r.height), 0) / 1000000).toFixed(2)}\n              </div>\n              <div className=\"text-sm text-gray-600\">m² total</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {Math.max(...risers.map(r => r.width))}\n              </div>\n              <div className=\"text-sm text-gray-600\">Largeur max (mm)</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {Math.max(...risers.map(r => r.height))}\n              </div>\n              <div className=\"text-sm text-gray-600\">Hauteur max (mm)</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Configuration */}\n      {projectData && (\n        <div className=\"grid md:grid-cols-2 gap-6 mb-6\">\n          {/* General Parameters */}\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\n            <h3 className=\"font-semibold text-gray-800 mb-3\">Paramètres généraux</h3>\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Largeur de scie (mm)\n                </label>\n                <input\n                  type=\"number\"\n                  value={sawThickness}\n                  onChange={(e) => setSawThickness(parseInt(e.target.value) || 10)}\n                  min=\"0\"\n                  max=\"50\"\n                  className=\"w-full p-2 border border-gray-300 rounded-md\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Large Planks */}\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <div className=\"flex justify-between items-center mb-3\">\n              <h3 className=\"font-semibold text-blue-800 flex items-center gap-2\">\n                <Package className=\"w-5 h-5\" />\n                Grandes planches disponibles\n              </h3>\n              <button\n                onClick={addNewPlank}\n                className=\"px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 flex items-center gap-1\"\n              >\n                <Plus className=\"w-4 h-4\" />\n                Ajouter\n              </button>\n            </div>\n            \n            <div className=\"space-y-2\">\n              {largePlanks.map((plank) => (\n                <div key={plank.id} className=\"flex items-center justify-between p-2 bg-white rounded border\">\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium\">{generatePlankName(plank.width, plank.height)}</div>\n                    <div className=\"text-sm text-gray-600\">\n                      {plank.width}×{plank.height}mm - {plank.price}€\n                      {plank.maxQuantity ? ` (max: ${plank.maxQuantity})` : ''}\n                    </div>\n                  </div>\n                  <div className=\"flex gap-1\">\n                    <button\n                      onClick={() => deletePlank(plank.id)}\n                      className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Calculate Button */}\n      {projectData && (\n        <div className=\"text-center mb-6\">\n          <button\n            onClick={optimizeCutting}\n            disabled={isCalculating || risers.length === 0}\n            className=\"px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 mx-auto text-lg font-semibold\"\n          >\n            {isCalculating ? (\n              <>\n                <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\n                Calcul en cours...\n              </>\n            ) : (\n              <>\n                <Calculator className=\"w-5 h-5\" />\n                Calculer l'optimisation\n              </>\n            )}\n          </button>\n        </div>\n      )}\n\n      {/* Results */}\n      {optimizationResults && (\n        <div className=\"space-y-6\">\n          <div className=\"bg-green-100 p-4 rounded-lg\">\n            <h3 className=\"font-semibold text-green-800 mb-2 flex items-center gap-2\">\n              <Euro className=\"w-5 h-5\" />\n              Résultat de l'optimisation\n            </h3>\n            <div className=\"grid md:grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {optimizationResults.totalCost.toFixed(2)}€\n                </div>\n                <div className=\"text-sm text-gray-600\">Coût total</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {optimizationResults.totalPlanks}\n                </div>\n                <div className=\"text-sm text-gray-600\">Grandes planches</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {risers.length - optimizationResults.remainingPieces.length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Contremarches placées</div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h3 className=\"font-semibold text-blue-800 mb-3 flex items-center gap-2\">\n              <Package className=\"w-5 h-5\" />\n              Récapitulatif des planches à commander\n            </h3>\n            <div className=\"space-y-2\">\n              {generatePlankSummary(optimizationResults)}\n              <div className=\"border-t pt-2 mt-3\">\n                <div className=\"flex justify-between items-center font-bold text-lg\">\n                  <span>Total à commander :</span>\n                  <span className=\"text-blue-600\">{optimizationResults.totalCost.toFixed(2)}€</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-gray-800 mb-4\">Plan de découpe détaillé</h3>\n            <div className=\"space-y-4\">\n              {optimizationResults.solution.map((item, index) => generatePlankVisualization(item, index))}\n            </div>\n          </div>\n\n          {optimizationResults.remainingPieces.length > 0 && (\n            <div className=\"bg-red-50 p-4 rounded-lg\">\n              <h3 className=\"font-semibold text-red-800 mb-2\">\n                Contremarches non placées ({optimizationResults.remainingPieces.length})\n              </h3>\n              <div className=\"text-sm text-red-600\">\n                {optimizationResults.remainingPieces.map(p => p.name).join(', ')}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Upload Modal */}\n      {showUploadModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded-lg max-w-md w-full mx-4\">\n            <h3 className=\"text-lg font-semibold mb-4 text-blue-800\">\n              Importer les mesures\n            </h3>\n            \n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Fichier JSON de l'étape 1\n              </label>\n              <input\n                type=\"file\"\n                accept=\".json\"\n                onChange={handleFileUpload}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              />\n            </div>\n            \n            <div className=\"flex justify-end gap-2\">\n              <button\n                onClick={() => setShowUploadModal(false)}\n                className=\"px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-md flex items-center gap-2\"\n              >\n                <X className=\"w-4 h-4\" />\n                Annuler\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Instructions */}\n      <div className=\"mt-8 bg-blue-50 p-4 rounded-lg\">\n        <h4 className=\"font-semibold text-blue-800 mb-2\">📋 Instructions</h4>\n        <div className=\"text-sm text-blue-700 space-y-1\">\n          <p><strong>1.</strong> Importez le fichier JSON exporté depuis l'étape 1</p>\n          <p><strong>2.</strong> Ajustez les paramètres de scie et les grandes planches disponibles</p>\n          <p><strong>3.</strong> Lancez l'optimisation pour obtenir le plan de découpe optimal</p>\n          <p><strong>4.</strong> Visualisez les résultats et le coût total</p>\n        </div>\n        <div className=\"mt-3 text-xs text-blue-600\">\n          L'algorithme optimise pour le coût total en tenant compte de l'efficacité de découpe et des prix des planches.\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RiserOptimizationApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}