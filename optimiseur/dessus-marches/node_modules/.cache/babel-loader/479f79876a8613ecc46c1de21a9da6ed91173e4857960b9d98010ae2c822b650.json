{"ast":null,"code":"var _jsxFileName = \"/Users/valentinbayard/Sublimarches/Sublimarches/optimiseur/contremarches/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Calculator, Plus, Trash2, X, Upload, Scissors, Package, Euro, ArrowLeft } from 'lucide-react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst RiserOptimizationApp = () => {\n  _s();\n  var _projectData$stairs, _projectData$stairs$s;\n  const [projectData, setProjectData] = useState(null);\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const [optimizationResults, setOptimizationResults] = useState(null);\n  const [isCalculating, setIsCalculating] = useState(false);\n\n  // Large planks configuration\n  const [largePlanks, setLargePlanks] = useState([{\n    id: 1,\n    width: 900,\n    height: 400,\n    price: 7.92,\n    maxQuantity: null,\n    name: '90x40cm'\n  }, {\n    id: 2,\n    width: 1360,\n    height: 400,\n    price: 11.74,\n    maxQuantity: null,\n    name: '136x40cm'\n  }, {\n    id: 3,\n    width: 1810,\n    height: 400,\n    price: 17.73,\n    maxQuantity: null,\n    name: '181x40cm'\n  }]);\n\n  // Saw thickness\n  const [sawThickness, setSawThickness] = useState(10);\n\n  // Safety margin\n  const [safetyMargin, setSafetyMargin] = useState(1);\n\n  // Extract risers from project data\n  const risers = (projectData === null || projectData === void 0 ? void 0 : (_projectData$stairs = projectData.stairs) === null || _projectData$stairs === void 0 ? void 0 : (_projectData$stairs$s = _projectData$stairs.steps) === null || _projectData$stairs$s === void 0 ? void 0 : _projectData$stairs$s.map(step => ({\n    id: step.stepNumber,\n    width: step.riserWidth,\n    height: step.height,\n    name: `Contremarche ${step.stepNumber}`,\n    comment: step.comment\n  }))) || [];\n\n  // Debug: log risers when projectData changes\n  useEffect(() => {\n    if (projectData) {\n      console.log('ProjectData mis à jour:', projectData);\n      console.log('Contremarches extraites:', risers);\n    }\n  }, [projectData, risers]);\n\n  // Handle file upload\n  const handleFileUpload = event => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = e => {\n        try {\n          var _data$metadata;\n          const data = JSON.parse(e.target.result);\n          console.log('Fichier importé:', data);\n\n          // Check if it's a valid stair measurement file\n          const isValidType = data.type === 'stair-measurement' || ((_data$metadata = data.metadata) === null || _data$metadata === void 0 ? void 0 : _data$metadata.type) === 'stair-measurement';\n          const hasStairs = data.stairs && data.stairs.steps && Array.isArray(data.stairs.steps);\n          if (isValidType && hasStairs) {\n            console.log('Contremarches trouvées:', data.stairs.steps.length);\n            setProjectData(data);\n            setShowUploadModal(false);\n          } else {\n            console.error('Structure de fichier invalide:', data);\n            alert('Fichier invalide. Veuillez utiliser un fichier exporté depuis l\\'étape 1.\\n\\nStructure attendue: fichier JSON avec type=\"stair-measurement\" et données des marches.');\n          }\n        } catch (error) {\n          console.error('Erreur de parsing JSON:', error);\n          alert('Erreur lors de la lecture du fichier JSON: ' + error.message);\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  // Add new plank\n  const addNewPlank = () => {\n    const newId = Math.max(...largePlanks.map(p => p.id), 0) + 1;\n    setLargePlanks(prev => [...prev, {\n      id: newId,\n      width: 1000,\n      height: 400,\n      price: 0.00,\n      maxQuantity: null,\n      name: '100x40cm'\n    }]);\n  };\n\n  // Delete plank\n  const deletePlank = id => {\n    setLargePlanks(prev => prev.filter(p => p.id !== id));\n  };\n\n  // Update plank\n  const updatePlank = (id, field, value) => {\n    setLargePlanks(prev => prev.map(plank => plank.id === id ? {\n      ...plank,\n      [field]: value\n    } : plank));\n  };\n\n  // Generate plank name\n  const generatePlankName = (width, height) => {\n    return `${Math.round(width / 10)}x${Math.round(height / 10)}cm`;\n  };\n\n  // Optimization algorithm\n  const optimizeCutting = () => {\n    if (risers.length === 0) {\n      alert('Aucune contremarche à optimiser !');\n      return;\n    }\n    setIsCalculating(true);\n\n    // Simulate calculation time\n    setTimeout(() => {\n      const solution = calculateOptimalCutting(risers, sawThickness, safetyMargin);\n      setOptimizationResults(solution);\n      setIsCalculating(false);\n    }, 1500);\n  };\n\n  // Calculate optimal cutting arrangement\n  const calculateOptimalCutting = (pieces, sawThickness, safetyMargin) => {\n    const solution = [];\n    let remainingPieces = pieces.map((piece, index) => ({\n      ...piece,\n      instanceId: `piece-${piece.id}`,\n      name: `${piece.id}`,\n      originalIndex: index\n    }));\n    const plankUsage = {};\n    largePlanks.forEach(plank => {\n      plankUsage[plank.id] = 0;\n    });\n    let totalCost = 0;\n    let totalPlanks = 0;\n    while (remainingPieces.length > 0) {\n      let bestOption = null;\n      let bestEfficiency = 0;\n\n      // Test each plank type\n      for (const plankType of largePlanks) {\n        if (plankType.maxQuantity && plankUsage[plankType.id] >= plankType.maxQuantity) {\n          continue;\n        }\n        const arrangement = calculateBestArrangement(remainingPieces, plankType, sawThickness, safetyMargin);\n        const costPerArea = plankType.price / (plankType.width * plankType.height);\n        const efficiency = arrangement.efficiency / costPerArea;\n        if (efficiency > bestEfficiency && arrangement.pieces.length > 0) {\n          bestEfficiency = efficiency;\n          bestOption = {\n            plankType,\n            arrangement,\n            costPerArea\n          };\n        }\n      }\n      if (bestOption) {\n        solution.push(bestOption);\n        plankUsage[bestOption.plankType.id]++;\n        totalCost += bestOption.plankType.price;\n        totalPlanks++;\n\n        // Remove used pieces\n        remainingPieces = remainingPieces.filter(piece => !bestOption.arrangement.pieces.some(used => used.instanceId === piece.instanceId));\n      } else {\n        // If no piece can be placed, try with available planks\n        const piece = remainingPieces[0];\n        const availablePlanks = largePlanks.filter(plank => !plank.maxQuantity || plankUsage[plank.id] < plank.maxQuantity);\n        const suitablePlank = availablePlanks.find(plank => {\n          const fitNormal = piece.width + safetyMargin <= plank.width && piece.height + safetyMargin <= plank.height;\n          const fitRotated = piece.height + safetyMargin <= plank.width && piece.width + safetyMargin <= plank.height;\n          return fitNormal || fitRotated;\n        });\n        if (suitablePlank) {\n          const rotated = !(piece.width <= suitablePlank.width && piece.height <= suitablePlank.height);\n          solution.push({\n            plankType: suitablePlank,\n            arrangement: {\n              pieces: [{\n                ...piece,\n                rotated,\n                x: 0,\n                y: 0,\n                displayWidth: rotated ? piece.height : piece.width,\n                displayHeight: rotated ? piece.width : piece.height\n              }],\n              efficiency: piece.width * piece.height / (suitablePlank.width * suitablePlank.height)\n            }\n          });\n          plankUsage[suitablePlank.id]++;\n          totalCost += suitablePlank.price;\n          totalPlanks++;\n          remainingPieces.shift();\n        } else {\n          break;\n        }\n      }\n    }\n    return {\n      solution,\n      totalCost,\n      totalPlanks,\n      remainingPieces,\n      efficiency: solution.reduce((sum, item) => sum + item.arrangement.efficiency, 0) / solution.length\n    };\n  };\n\n  // Calculate best arrangement for a plank\n  const calculateBestArrangement = (pieces, plankType, sawThickness, safetyMargin) => {\n    const arrangements = [];\n\n    // Try different piece combinations\n    for (let i = 1; i <= Math.min(pieces.length, 10); i++) {\n      const combinations = getCombinations(pieces, i);\n      for (const combination of combinations) {\n        const arrangement = placePieces(combination, plankType, sawThickness, safetyMargin);\n        if (arrangement.pieces.length > 0) {\n          const totalArea = arrangement.pieces.reduce((sum, piece) => sum + piece.width * piece.height, 0);\n          arrangement.totalValue = totalArea;\n          arrangement.efficiency = totalArea / (plankType.width * plankType.height);\n          arrangements.push(arrangement);\n        }\n      }\n    }\n    return arrangements.reduce((best, current) => current.totalValue > best.totalValue ? current : best, {\n      pieces: [],\n      totalValue: 0,\n      efficiency: 0\n    });\n  };\n\n  // Get combinations of pieces\n  const getCombinations = (pieces, size) => {\n    if (size === 1) return pieces.map(p => [p]);\n    if (size === pieces.length) return [pieces];\n    const combinations = [];\n    for (let i = 0; i <= pieces.length - size; i++) {\n      const head = pieces[i];\n      const tailCombinations = getCombinations(pieces.slice(i + 1), size - 1);\n      for (const tail of tailCombinations) {\n        combinations.push([head, ...tail]);\n      }\n    }\n    return combinations;\n  };\n\n  // Place pieces on a plank\n  const placePieces = (pieces, plankType, sawThickness) => {\n    const placedPieces = [];\n    for (const piece of pieces) {\n      const position = findBestPosition(piece, placedPieces, plankType, sawThickness);\n      if (position) {\n        const rotated = position.rotated;\n        placedPieces.push({\n          ...piece,\n          x: position.x,\n          y: position.y,\n          rotated,\n          displayWidth: rotated ? piece.height : piece.width,\n          displayHeight: rotated ? piece.width : piece.height\n        });\n      }\n    }\n    return {\n      pieces: placedPieces\n    };\n  };\n\n  // Find best position for a piece\n  const findBestPosition = (piece, placedPieces, plankType, sawThickness) => {\n    const positions = [];\n\n    // Try normal orientation\n    if (piece.width <= plankType.width && piece.height <= plankType.height) {\n      positions.push({\n        x: 0,\n        y: 0,\n        rotated: false\n      });\n    }\n\n    // Try rotated orientation\n    if (piece.height <= plankType.width && piece.width <= plankType.height) {\n      positions.push({\n        x: 0,\n        y: 0,\n        rotated: true\n      });\n    }\n\n    // Add positions near existing pieces\n    for (const existing of placedPieces) {\n      const rightPos = {\n        x: existing.x + existing.displayWidth + sawThickness,\n        y: existing.y,\n        rotated: false\n      };\n      const bottomPos = {\n        x: existing.x,\n        y: existing.y + existing.displayHeight + sawThickness,\n        rotated: false\n      };\n      positions.push(rightPos, bottomPos);\n    }\n\n    // Sort positions by x then y\n    positions.sort((a, b) => a.x - b.x || a.y - b.y);\n\n    // Test each position\n    for (const pos of positions) {\n      if (canPlaceAt(piece, pos, placedPieces, plankType, sawThickness)) {\n        return pos;\n      }\n    }\n    return null;\n  };\n\n  // Check if piece can be placed at position\n  const canPlaceAt = (piece, position, placedPieces, plankType, sawThickness) => {\n    const width = position.rotated ? piece.height : piece.width;\n    const height = position.rotated ? piece.width : piece.height;\n\n    // Check plank boundaries\n    if (position.x + width > plankType.width || position.y + height > plankType.height) {\n      return false;\n    }\n\n    // Check collisions with existing pieces\n    for (const existing of placedPieces) {\n      if (!(position.x >= existing.x + existing.displayWidth + sawThickness || position.x + width + sawThickness <= existing.x || position.y >= existing.y + existing.displayHeight + sawThickness || position.y + height + sawThickness <= existing.y)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // Generate plank summary\n  const generatePlankSummary = solution => {\n    const summary = {};\n    solution.solution.forEach(item => {\n      const plankName = generatePlankName(item.plankType.width, item.plankType.height);\n      if (!summary[plankName]) {\n        summary[plankName] = {\n          count: 0,\n          price: item.plankType.price,\n          dimensions: `${item.plankType.width}×${item.plankType.height}mm`\n        };\n      }\n      summary[plankName].count++;\n    });\n    return Object.entries(summary).map(([name, data]) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flex justify-between items-center p-2 bg-white rounded border\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"font-medium\",\n          children: name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-sm text-gray-600 ml-2\",\n          children: [\"(\", data.dimensions, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-right\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"font-semibold text-blue-600\",\n          children: [data.count, \" planche\", data.count > 1 ? 's' : '']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-600\",\n          children: [data.count, \" \\xD7 \", data.price, \"\\u20AC = \", (data.count * data.price).toFixed(2), \"\\u20AC\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this)]\n    }, name, true, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this));\n  };\n\n  // Generate plank visualization\n  const generatePlankVisualization = (item, index) => {\n    const plankType = item.plankType;\n    const arrangement = item.arrangement;\n\n    // Calculate scale to maintain real proportions\n    const maxDisplayWidth = 400;\n    const maxDisplayHeight = 200;\n    const scaleX = maxDisplayWidth / plankType.width;\n    const scaleY = maxDisplayHeight / plankType.height;\n    const scale = Math.min(scaleX, scaleY);\n    const displayWidth = plankType.width * scale;\n    const displayHeight = plankType.height * scale;\n    const colors = ['bg-blue-300', 'bg-green-300', 'bg-red-300', 'bg-purple-300', 'bg-yellow-300', 'bg-pink-300', 'bg-indigo-300', 'bg-orange-300'];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"border border-gray-300 p-4 bg-amber-50\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"font-semibold mb-2\",\n        children: [generatePlankName(plankType.width, plankType.height), \" - \", plankType.price, \"\\u20AC\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"relative border-2 border-amber-800 bg-amber-100\",\n          style: {\n            width: displayWidth,\n            height: displayHeight\n          },\n          children: arrangement.pieces.map((piece, pieceIndex) => {\n            const color = colors[piece.originalIndex % colors.length];\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `absolute border border-gray-700 ${color} flex items-center justify-center text-xs font-bold shadow-sm`,\n              style: {\n                width: piece.displayWidth * scale,\n                height: piece.displayHeight * scale,\n                left: piece.x * scale,\n                top: piece.y * scale\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-center leading-tight\",\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"font-bold\",\n                  children: piece.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 411,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-xs\",\n                  children: [piece.width, \"\\xD7\", piece.height]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 412,\n                  columnNumber: 21\n                }, this), piece.rotated && /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"text-xs\",\n                  children: \"\\u21BB\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 413,\n                  columnNumber: 39\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 410,\n                columnNumber: 19\n              }, this)\n            }, pieceIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 400,\n              columnNumber: 17\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-2 text-sm text-gray-600 text-center\",\n        children: [\"Pi\\xE8ces: \", arrangement.pieces.length, \" | Efficacit\\xE9: \", (arrangement.efficiency * 100).toFixed(1), \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-1 text-xs text-gray-500 text-center\",\n        children: [\"Dimensions: \", plankType.width, \"\\xD7\", plankType.height, \"mm | \\xC9chelle: 1:\", Math.round(1 / scale)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"max-w-6xl mx-auto p-6 bg-white min-h-screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-4 mb-2\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"/Sublimarches/optimiseur/mesures/\",\n          className: \"flex items-center gap-2 text-blue-600 hover:text-blue-800 text-sm\",\n          children: [/*#__PURE__*/_jsxDEV(ArrowLeft, {\n            className: \"w-4 h-4\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 439,\n            columnNumber: 13\n          }, this), \"Retour \\xE0 l'\\xE9tape 1\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 435,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-3xl font-bold text-gray-800 mb-2 flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(Scissors, {\n          className: \"text-blue-600\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 444,\n          columnNumber: 11\n        }, this), \"Optimisation des Contremarches\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 443,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600\",\n        children: \"\\xC9tape 2/3 : Optimisez la d\\xE9coupe des contremarches sur les grandes planches\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this), !projectData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-blue-50 p-6 rounded-lg mb-6 text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-semibold text-blue-800 mb-4 flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(Upload, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 456,\n          columnNumber: 13\n        }, this), \"Importer les mesures de l'\\xE9tape 1\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-gray-600 mb-4\",\n        children: \"Uploadez le fichier JSON export\\xE9 depuis l'\\xE9tape 1 pour commencer l'optimisation\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 459,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setShowUploadModal(true),\n        className: \"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2 mx-auto\",\n        children: [/*#__PURE__*/_jsxDEV(Upload, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 466,\n          columnNumber: 13\n        }, this), \"Choisir un fichier JSON\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 462,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 9\n    }, this), projectData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-green-50 p-4 rounded-lg mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"font-semibold text-green-800 mb-3 flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(Package, {\n          className: \"w-5 h-5\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 476,\n          columnNumber: 13\n        }, this), \"Projet : \", projectData.project.name]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-green-600\",\n            children: risers.length\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 481,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600\",\n            children: \"Contremarches\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 482,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 480,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-blue-600\",\n            children: (risers.reduce((sum, r) => sum + r.width * r.height, 0) / 1000000).toFixed(2)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 485,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600\",\n            children: \"m\\xB2 total\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 488,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 484,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-purple-600\",\n            children: Math.max(...risers.map(r => r.width))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 491,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600\",\n            children: \"Largeur max (mm)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 494,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-2xl font-bold text-orange-600\",\n            children: Math.max(...risers.map(r => r.height))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-sm text-gray-600\",\n            children: \"Hauteur max (mm)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 9\n    }, this), projectData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid md:grid-cols-2 gap-6 mb-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-gray-50 p-4 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-semibold text-gray-800 mb-3\",\n          children: \"Param\\xE8tres g\\xE9n\\xE9raux\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-3\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"block text-sm font-medium text-gray-700 mb-1\",\n              children: \"Largeur de scie (mm)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 514,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"number\",\n              value: sawThickness,\n              onChange: e => setSawThickness(parseInt(e.target.value) || 10),\n              min: \"0\",\n              max: \"50\",\n              className: \"w-full p-2 border border-gray-300 rounded-md\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 517,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 513,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 512,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 510,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-blue-50 p-4 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between items-center mb-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"font-semibold text-blue-800 flex items-center gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(Package, {\n              className: \"w-5 h-5\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 533,\n              columnNumber: 17\n            }, this), \"Grandes planches disponibles\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 532,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: addNewPlank,\n            className: \"px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 flex items-center gap-1\",\n            children: [/*#__PURE__*/_jsxDEV(Plus, {\n              className: \"w-4 h-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 540,\n              columnNumber: 17\n            }, this), \"Ajouter\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 536,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 531,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-2\",\n          children: largePlanks.map(plank => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"p-3 bg-white rounded border\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid grid-cols-2 md:grid-cols-4 gap-2 mb-2\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-xs font-medium text-gray-700 mb-1\",\n                  children: \"Largeur (mm)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 550,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: plank.width,\n                  onChange: e => updatePlank(plank.id, 'width', parseInt(e.target.value) || 0),\n                  className: \"w-full p-1 text-sm border border-gray-300 rounded\",\n                  min: \"1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 551,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 549,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-xs font-medium text-gray-700 mb-1\",\n                  children: \"Hauteur (mm)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 560,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: plank.height,\n                  onChange: e => updatePlank(plank.id, 'height', parseInt(e.target.value) || 0),\n                  className: \"w-full p-1 text-sm border border-gray-300 rounded\",\n                  min: \"1\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 561,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 559,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-xs font-medium text-gray-700 mb-1\",\n                  children: \"Prix (\\u20AC)\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 570,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: plank.price,\n                  onChange: e => updatePlank(plank.id, 'price', parseFloat(e.target.value) || 0),\n                  className: \"w-full p-1 text-sm border border-gray-300 rounded\",\n                  min: \"0\",\n                  step: \"0.01\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 571,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 569,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"block text-xs font-medium text-gray-700 mb-1\",\n                  children: \"Quantit\\xE9 max\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 581,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"number\",\n                  value: plank.maxQuantity || '',\n                  onChange: e => updatePlank(plank.id, 'maxQuantity', e.target.value ? parseInt(e.target.value) : null),\n                  className: \"w-full p-1 text-sm border border-gray-300 rounded\",\n                  min: \"1\",\n                  placeholder: \"Illimit\\xE9\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 582,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 580,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 548,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex items-center justify-between\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"text-sm text-gray-600\",\n                children: [generatePlankName(plank.width, plank.height), \" - \", plank.price, \"\\u20AC\", plank.maxQuantity ? ` (max: ${plank.maxQuantity})` : ' (illimité)']\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 593,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => deletePlank(plank.id),\n                className: \"p-1 text-red-600 hover:bg-red-100 rounded\",\n                title: \"Supprimer cette planche\",\n                children: /*#__PURE__*/_jsxDEV(Trash2, {\n                  className: \"w-4 h-4\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 602,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 597,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 592,\n              columnNumber: 19\n            }, this)]\n          }, plank.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 547,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 545,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 9\n    }, this), projectData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center mb-6\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: optimizeCutting,\n        disabled: isCalculating || risers.length === 0,\n        className: \"px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 mx-auto text-lg font-semibold\",\n        children: isCalculating ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 622,\n            columnNumber: 17\n          }, this), \"Calcul en cours...\"]\n        }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(Calculator, {\n            className: \"w-5 h-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 17\n          }, this), \"Calculer l'optimisation\"]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 615,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 614,\n      columnNumber: 9\n    }, this), optimizationResults && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"space-y-6\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-green-100 p-4 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-semibold text-green-800 mb-2 flex items-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(Euro, {\n            className: \"w-5 h-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 640,\n            columnNumber: 15\n          }, this), \"R\\xE9sultat de l'optimisation\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"grid md:grid-cols-3 gap-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-2xl font-bold text-green-600\",\n              children: [optimizationResults.totalCost.toFixed(2), \"\\u20AC\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 645,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-600\",\n              children: \"Co\\xFBt total\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 648,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 644,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-2xl font-bold text-blue-600\",\n              children: optimizationResults.totalPlanks\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 651,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-600\",\n              children: \"Grandes planches\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 654,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 650,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"text-center\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-2xl font-bold text-purple-600\",\n              children: risers.length - optimizationResults.remainingPieces.length\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 657,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"text-sm text-gray-600\",\n              children: \"Contremarches plac\\xE9es\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 660,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 656,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 643,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-blue-50 p-4 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-semibold text-blue-800 mb-3 flex items-center gap-2\",\n          children: [/*#__PURE__*/_jsxDEV(Package, {\n            className: \"w-5 h-5\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 667,\n            columnNumber: 15\n          }, this), \"R\\xE9capitulatif des planches \\xE0 commander\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 666,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-2\",\n          children: [generatePlankSummary(optimizationResults), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"border-t pt-2 mt-3\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flex justify-between items-center font-bold text-lg\",\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                children: \"Total \\xE0 commander :\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 674,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"text-blue-600\",\n                children: [optimizationResults.totalCost.toFixed(2), \"\\u20AC\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 675,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 673,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 672,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 670,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 665,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-semibold text-gray-800 mb-4\",\n          children: \"Plan de d\\xE9coupe d\\xE9taill\\xE9\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 682,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"space-y-4\",\n          children: optimizationResults.solution.map((item, index) => generatePlankVisualization(item, index))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 683,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 681,\n        columnNumber: 11\n      }, this), optimizationResults.remainingPieces.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-red-50 p-4 rounded-lg\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"font-semibold text-red-800 mb-2\",\n          children: [\"Contremarches non plac\\xE9es (\", optimizationResults.remainingPieces.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 690,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-red-600\",\n          children: optimizationResults.remainingPieces.map(p => p.name).join(', ')\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 693,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 689,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 9\n    }, this), showUploadModal && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-6 rounded-lg max-w-md w-full mx-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-lg font-semibold mb-4 text-blue-800\",\n          children: \"Importer les mesures\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 705,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mb-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"block text-sm font-medium text-gray-700 mb-2\",\n            children: \"Fichier JSON de l'\\xE9tape 1\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 710,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".json\",\n            onChange: handleFileUpload,\n            className: \"w-full p-2 border border-gray-300 rounded-md\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 709,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-end gap-2\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowUploadModal(false),\n            className: \"px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-md flex items-center gap-2\",\n            children: [/*#__PURE__*/_jsxDEV(X, {\n              className: \"w-4 h-4\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 726,\n              columnNumber: 17\n            }, this), \"Annuler\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 722,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 704,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 703,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mt-8 bg-blue-50 p-4 rounded-lg\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        className: \"font-semibold text-blue-800 mb-2\",\n        children: \"\\uD83D\\uDCCB Instructions\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 736,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-sm text-blue-700 space-y-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"1.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 738,\n            columnNumber: 14\n          }, this), \" Importez le fichier JSON export\\xE9 depuis l'\\xE9tape 1\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 738,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"2.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 739,\n            columnNumber: 14\n          }, this), \" Ajustez les param\\xE8tres de scie et les grandes planches disponibles\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 739,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"3.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 740,\n            columnNumber: 14\n          }, this), \" Lancez l'optimisation pour obtenir le plan de d\\xE9coupe optimal\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 740,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"4.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 741,\n            columnNumber: 14\n          }, this), \" Visualisez les r\\xE9sultats et le co\\xFBt total\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 741,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 737,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-3 text-xs text-blue-600\",\n        children: \"L'algorithme optimise pour le co\\xFBt total en tenant compte de l'efficacit\\xE9 de d\\xE9coupe et des prix des planches.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 743,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 735,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 432,\n    columnNumber: 5\n  }, this);\n};\n_s(RiserOptimizationApp, \"lHc46YlZlFowMXzJpCHbc/kC1n8=\");\n_c = RiserOptimizationApp;\nexport default RiserOptimizationApp;\nvar _c;\n$RefreshReg$(_c, \"RiserOptimizationApp\");","map":{"version":3,"names":["React","useState","useEffect","Calculator","Plus","Trash2","X","Upload","Scissors","Package","Euro","ArrowLeft","jsxDEV","_jsxDEV","Fragment","_Fragment","RiserOptimizationApp","_s","_projectData$stairs","_projectData$stairs$s","projectData","setProjectData","showUploadModal","setShowUploadModal","optimizationResults","setOptimizationResults","isCalculating","setIsCalculating","largePlanks","setLargePlanks","id","width","height","price","maxQuantity","name","sawThickness","setSawThickness","safetyMargin","setSafetyMargin","risers","stairs","steps","map","step","stepNumber","riserWidth","comment","console","log","handleFileUpload","event","file","target","files","reader","FileReader","onload","e","_data$metadata","data","JSON","parse","result","isValidType","type","metadata","hasStairs","Array","isArray","length","error","alert","message","readAsText","addNewPlank","newId","Math","max","p","prev","deletePlank","filter","updatePlank","field","value","plank","generatePlankName","round","optimizeCutting","setTimeout","solution","calculateOptimalCutting","pieces","remainingPieces","piece","index","instanceId","originalIndex","plankUsage","forEach","totalCost","totalPlanks","bestOption","bestEfficiency","plankType","arrangement","calculateBestArrangement","costPerArea","efficiency","push","some","used","availablePlanks","suitablePlank","find","fitNormal","fitRotated","rotated","x","y","displayWidth","displayHeight","shift","reduce","sum","item","arrangements","i","min","combinations","getCombinations","combination","placePieces","totalArea","totalValue","best","current","size","head","tailCombinations","slice","tail","placedPieces","position","findBestPosition","positions","existing","rightPos","bottomPos","sort","a","b","pos","canPlaceAt","generatePlankSummary","summary","plankName","count","dimensions","Object","entries","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toFixed","generatePlankVisualization","maxDisplayWidth","maxDisplayHeight","scaleX","scaleY","scale","colors","style","pieceIndex","color","left","top","href","onClick","project","r","onChange","parseInt","parseFloat","placeholder","title","disabled","join","accept","_c","$RefreshReg$"],"sources":["/Users/valentinbayard/Sublimarches/Sublimarches/optimiseur/contremarches/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Calculator, Plus, Trash2, X, Upload, Scissors, Package, Euro, ArrowLeft } from 'lucide-react';\n\nconst RiserOptimizationApp = () => {\n  const [projectData, setProjectData] = useState(null);\n  const [showUploadModal, setShowUploadModal] = useState(false);\n  const [optimizationResults, setOptimizationResults] = useState(null);\n  const [isCalculating, setIsCalculating] = useState(false);\n  \n  // Large planks configuration\n  const [largePlanks, setLargePlanks] = useState([\n    { id: 1, width: 900, height: 400, price: 7.92, maxQuantity: null, name: '90x40cm' },\n    { id: 2, width: 1360, height: 400, price: 11.74, maxQuantity: null, name: '136x40cm' },\n    { id: 3, width: 1810, height: 400, price: 17.73, maxQuantity: null, name: '181x40cm' }\n  ]);\n\n  // Saw thickness\n  const [sawThickness, setSawThickness] = useState(10);\n  \n  // Safety margin\n  const [safetyMargin, setSafetyMargin] = useState(1);\n\n  // Extract risers from project data\n  const risers = projectData?.stairs?.steps?.map(step => ({\n    id: step.stepNumber,\n    width: step.riserWidth,\n    height: step.height,\n    name: `Contremarche ${step.stepNumber}`,\n    comment: step.comment\n  })) || [];\n  \n  // Debug: log risers when projectData changes\n  useEffect(() => {\n    if (projectData) {\n      console.log('ProjectData mis à jour:', projectData);\n      console.log('Contremarches extraites:', risers);\n    }\n  }, [projectData, risers]);\n\n  // Handle file upload\n  const handleFileUpload = (event) => {\n    const file = event.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        try {\n          const data = JSON.parse(e.target.result);\n          console.log('Fichier importé:', data);\n          \n          // Check if it's a valid stair measurement file\n          const isValidType = (data.type === 'stair-measurement' || data.metadata?.type === 'stair-measurement');\n          const hasStairs = data.stairs && data.stairs.steps && Array.isArray(data.stairs.steps);\n          \n          if (isValidType && hasStairs) {\n            console.log('Contremarches trouvées:', data.stairs.steps.length);\n            setProjectData(data);\n            setShowUploadModal(false);\n          } else {\n            console.error('Structure de fichier invalide:', data);\n            alert('Fichier invalide. Veuillez utiliser un fichier exporté depuis l\\'étape 1.\\n\\nStructure attendue: fichier JSON avec type=\"stair-measurement\" et données des marches.');\n          }\n        } catch (error) {\n          console.error('Erreur de parsing JSON:', error);\n          alert('Erreur lors de la lecture du fichier JSON: ' + error.message);\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  // Add new plank\n  const addNewPlank = () => {\n    const newId = Math.max(...largePlanks.map(p => p.id), 0) + 1;\n    setLargePlanks(prev => [...prev, {\n      id: newId,\n      width: 1000,\n      height: 400,\n      price: 0.00,\n      maxQuantity: null,\n      name: '100x40cm'\n    }]);\n  };\n\n  // Delete plank\n  const deletePlank = (id) => {\n    setLargePlanks(prev => prev.filter(p => p.id !== id));\n  };\n\n  // Update plank\n  const updatePlank = (id, field, value) => {\n    setLargePlanks(prev => prev.map(plank => \n      plank.id === id ? { ...plank, [field]: value } : plank\n    ));\n  };\n\n  // Generate plank name\n  const generatePlankName = (width, height) => {\n    return `${Math.round(width/10)}x${Math.round(height/10)}cm`;\n  };\n\n  // Optimization algorithm\n  const optimizeCutting = () => {\n    if (risers.length === 0) {\n      alert('Aucune contremarche à optimiser !');\n      return;\n    }\n\n    setIsCalculating(true);\n\n    // Simulate calculation time\n    setTimeout(() => {\n      const solution = calculateOptimalCutting(risers, sawThickness, safetyMargin);\n      setOptimizationResults(solution);\n      setIsCalculating(false);\n    }, 1500);\n  };\n\n  // Calculate optimal cutting arrangement\n  const calculateOptimalCutting = (pieces, sawThickness, safetyMargin) => {\n    const solution = [];\n    let remainingPieces = pieces.map((piece, index) => ({\n      ...piece,\n      instanceId: `piece-${piece.id}`,\n      name: `${piece.id}`,\n      originalIndex: index\n    }));\n    \n    const plankUsage = {};\n    largePlanks.forEach(plank => {\n      plankUsage[plank.id] = 0;\n    });\n\n    let totalCost = 0;\n    let totalPlanks = 0;\n\n    while (remainingPieces.length > 0) {\n      let bestOption = null;\n      let bestEfficiency = 0;\n      \n      // Test each plank type\n      for (const plankType of largePlanks) {\n        if (plankType.maxQuantity && plankUsage[plankType.id] >= plankType.maxQuantity) {\n          continue;\n        }\n        \n        const arrangement = calculateBestArrangement(remainingPieces, plankType, sawThickness, safetyMargin);\n        const costPerArea = plankType.price / (plankType.width * plankType.height);\n        const efficiency = arrangement.efficiency / costPerArea;\n        \n        if (efficiency > bestEfficiency && arrangement.pieces.length > 0) {\n          bestEfficiency = efficiency;\n          bestOption = {\n            plankType,\n            arrangement,\n            costPerArea\n          };\n        }\n      }\n      \n      if (bestOption) {\n        solution.push(bestOption);\n        plankUsage[bestOption.plankType.id]++;\n        totalCost += bestOption.plankType.price;\n        totalPlanks++;\n        \n        // Remove used pieces\n        remainingPieces = remainingPieces.filter(piece => \n          !bestOption.arrangement.pieces.some(used => used.instanceId === piece.instanceId)\n        );\n      } else {\n        // If no piece can be placed, try with available planks\n        const piece = remainingPieces[0];\n        const availablePlanks = largePlanks.filter(plank => \n          !plank.maxQuantity || plankUsage[plank.id] < plank.maxQuantity\n        );\n        \n        const suitablePlank = availablePlanks.find(plank => {\n          const fitNormal = piece.width + safetyMargin <= plank.width && piece.height + safetyMargin <= plank.height;\n          const fitRotated = piece.height + safetyMargin <= plank.width && piece.width + safetyMargin <= plank.height;\n          return fitNormal || fitRotated;\n        });\n        \n        if (suitablePlank) {\n          const rotated = !(piece.width <= suitablePlank.width && piece.height <= suitablePlank.height);\n          solution.push({\n            plankType: suitablePlank,\n            arrangement: { \n              pieces: [{\n                ...piece,\n                rotated,\n                x: 0,\n                y: 0,\n                displayWidth: rotated ? piece.height : piece.width,\n                displayHeight: rotated ? piece.width : piece.height\n              }],\n              efficiency: (piece.width * piece.height) / (suitablePlank.width * suitablePlank.height)\n            }\n          });\n          plankUsage[suitablePlank.id]++;\n          totalCost += suitablePlank.price;\n          totalPlanks++;\n          remainingPieces.shift();\n        } else {\n          break;\n        }\n      }\n    }\n\n    return {\n      solution,\n      totalCost,\n      totalPlanks,\n      remainingPieces,\n      efficiency: solution.reduce((sum, item) => sum + item.arrangement.efficiency, 0) / solution.length\n    };\n  };\n\n  // Calculate best arrangement for a plank\n  const calculateBestArrangement = (pieces, plankType, sawThickness, safetyMargin) => {\n    const arrangements = [];\n    \n    // Try different piece combinations\n    for (let i = 1; i <= Math.min(pieces.length, 10); i++) {\n      const combinations = getCombinations(pieces, i);\n      \n      for (const combination of combinations) {\n        const arrangement = placePieces(combination, plankType, sawThickness, safetyMargin);\n        if (arrangement.pieces.length > 0) {\n          const totalArea = arrangement.pieces.reduce((sum, piece) => \n            sum + (piece.width * piece.height), 0\n          );\n          arrangement.totalValue = totalArea;\n          arrangement.efficiency = totalArea / (plankType.width * plankType.height);\n          arrangements.push(arrangement);\n        }\n      }\n    }\n    \n    return arrangements.reduce((best, current) => \n      current.totalValue > best.totalValue ? current : best\n    , { pieces: [], totalValue: 0, efficiency: 0 });\n  };\n\n  // Get combinations of pieces\n  const getCombinations = (pieces, size) => {\n    if (size === 1) return pieces.map(p => [p]);\n    if (size === pieces.length) return [pieces];\n    \n    const combinations = [];\n    for (let i = 0; i <= pieces.length - size; i++) {\n      const head = pieces[i];\n      const tailCombinations = getCombinations(pieces.slice(i + 1), size - 1);\n      for (const tail of tailCombinations) {\n        combinations.push([head, ...tail]);\n      }\n    }\n    return combinations;\n  };\n\n  // Place pieces on a plank\n  const placePieces = (pieces, plankType, sawThickness) => {\n    const placedPieces = [];\n    \n    for (const piece of pieces) {\n      const position = findBestPosition(piece, placedPieces, plankType, sawThickness);\n      if (position) {\n        const rotated = position.rotated;\n        placedPieces.push({\n          ...piece,\n          x: position.x,\n          y: position.y,\n          rotated,\n          displayWidth: rotated ? piece.height : piece.width,\n          displayHeight: rotated ? piece.width : piece.height\n        });\n      }\n    }\n    \n    return { pieces: placedPieces };\n  };\n\n  // Find best position for a piece\n  const findBestPosition = (piece, placedPieces, plankType, sawThickness) => {\n    const positions = [];\n    \n    // Try normal orientation\n    if (piece.width <= plankType.width && piece.height <= plankType.height) {\n      positions.push({ x: 0, y: 0, rotated: false });\n    }\n    \n    // Try rotated orientation\n    if (piece.height <= plankType.width && piece.width <= plankType.height) {\n      positions.push({ x: 0, y: 0, rotated: true });\n    }\n    \n    // Add positions near existing pieces\n    for (const existing of placedPieces) {\n      const rightPos = { x: existing.x + existing.displayWidth + sawThickness, y: existing.y, rotated: false };\n      const bottomPos = { x: existing.x, y: existing.y + existing.displayHeight + sawThickness, rotated: false };\n      positions.push(rightPos, bottomPos);\n    }\n    \n    // Sort positions by x then y\n    positions.sort((a, b) => a.x - b.x || a.y - b.y);\n    \n    // Test each position\n    for (const pos of positions) {\n      if (canPlaceAt(piece, pos, placedPieces, plankType, sawThickness)) {\n        return pos;\n      }\n    }\n    \n    return null;\n  };\n\n  // Check if piece can be placed at position\n  const canPlaceAt = (piece, position, placedPieces, plankType, sawThickness) => {\n    const width = position.rotated ? piece.height : piece.width;\n    const height = position.rotated ? piece.width : piece.height;\n    \n    // Check plank boundaries\n    if (position.x + width > plankType.width || position.y + height > plankType.height) {\n      return false;\n    }\n    \n    // Check collisions with existing pieces\n    for (const existing of placedPieces) {\n      if (!(position.x >= existing.x + existing.displayWidth + sawThickness ||\n            position.x + width + sawThickness <= existing.x ||\n            position.y >= existing.y + existing.displayHeight + sawThickness ||\n            position.y + height + sawThickness <= existing.y)) {\n        return false;\n      }\n    }\n    \n    return true;\n  };\n\n  // Generate plank summary\n  const generatePlankSummary = (solution) => {\n    const summary = {};\n    solution.solution.forEach(item => {\n      const plankName = generatePlankName(item.plankType.width, item.plankType.height);\n      if (!summary[plankName]) {\n        summary[plankName] = { \n          count: 0, \n          price: item.plankType.price, \n          dimensions: `${item.plankType.width}×${item.plankType.height}mm` \n        };\n      }\n      summary[plankName].count++;\n    });\n\n    return Object.entries(summary).map(([name, data]) => (\n      <div key={name} className=\"flex justify-between items-center p-2 bg-white rounded border\">\n        <div>\n          <span className=\"font-medium\">{name}</span>\n          <span className=\"text-sm text-gray-600 ml-2\">({data.dimensions})</span>\n        </div>\n        <div className=\"text-right\">\n          <div className=\"font-semibold text-blue-600\">\n            {data.count} planche{data.count > 1 ? 's' : ''}\n          </div>\n          <div className=\"text-sm text-gray-600\">\n            {data.count} × {data.price}€ = {(data.count * data.price).toFixed(2)}€\n          </div>\n        </div>\n      </div>\n    ));\n  };\n\n  // Generate plank visualization\n  const generatePlankVisualization = (item, index) => {\n    const plankType = item.plankType;\n    const arrangement = item.arrangement;\n    \n    // Calculate scale to maintain real proportions\n    const maxDisplayWidth = 400;\n    const maxDisplayHeight = 200;\n    const scaleX = maxDisplayWidth / plankType.width;\n    const scaleY = maxDisplayHeight / plankType.height;\n    const scale = Math.min(scaleX, scaleY);\n    \n    const displayWidth = plankType.width * scale;\n    const displayHeight = plankType.height * scale;\n    \n    const colors = ['bg-blue-300', 'bg-green-300', 'bg-red-300', 'bg-purple-300', 'bg-yellow-300', 'bg-pink-300', 'bg-indigo-300', 'bg-orange-300'];\n    \n    return (\n      <div key={index} className=\"border border-gray-300 p-4 bg-amber-50\">\n        <h4 className=\"font-semibold mb-2\">{generatePlankName(plankType.width, plankType.height)} - {plankType.price}€</h4>\n        <div className=\"flex justify-center\">\n          <div \n            className=\"relative border-2 border-amber-800 bg-amber-100\" \n            style={{ width: displayWidth, height: displayHeight }}\n          >\n            {arrangement.pieces.map((piece, pieceIndex) => {\n              const color = colors[piece.originalIndex % colors.length];\n              return (\n                <div \n                  key={pieceIndex}\n                  className={`absolute border border-gray-700 ${color} flex items-center justify-center text-xs font-bold shadow-sm`}\n                  style={{\n                    width: piece.displayWidth * scale,\n                    height: piece.displayHeight * scale,\n                    left: piece.x * scale,\n                    top: piece.y * scale\n                  }}\n                >\n                  <div className=\"text-center leading-tight\">\n                    <div className=\"font-bold\">{piece.name}</div>\n                    <div className=\"text-xs\">{piece.width}×{piece.height}</div>\n                    {piece.rotated && <div className=\"text-xs\">↻</div>}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"mt-2 text-sm text-gray-600 text-center\">\n          Pièces: {arrangement.pieces.length} | \n          Efficacité: {(arrangement.efficiency * 100).toFixed(1)}%\n        </div>\n        <div className=\"mt-1 text-xs text-gray-500 text-center\">\n          Dimensions: {plankType.width}×{plankType.height}mm | Échelle: 1:{Math.round(1/scale)}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 bg-white min-h-screen\">\n      <div className=\"mb-6\">\n        <div className=\"flex items-center gap-4 mb-2\">\n          <a \n            href=\"/Sublimarches/optimiseur/mesures/\" \n            className=\"flex items-center gap-2 text-blue-600 hover:text-blue-800 text-sm\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Retour à l'étape 1\n          </a>\n        </div>\n        <h1 className=\"text-3xl font-bold text-gray-800 mb-2 flex items-center gap-2\">\n          <Scissors className=\"text-blue-600\" />\n          Optimisation des Contremarches\n        </h1>\n        <p className=\"text-gray-600\">\n          Étape 2/3 : Optimisez la découpe des contremarches sur les grandes planches\n        </p>\n      </div>\n\n      {/* File Upload Section */}\n      {!projectData && (\n        <div className=\"bg-blue-50 p-6 rounded-lg mb-6 text-center\">\n          <h3 className=\"font-semibold text-blue-800 mb-4 flex items-center gap-2\">\n            <Upload className=\"w-5 h-5\" />\n            Importer les mesures de l'étape 1\n          </h3>\n          <p className=\"text-gray-600 mb-4\">\n            Uploadez le fichier JSON exporté depuis l'étape 1 pour commencer l'optimisation\n          </p>\n          <button\n            onClick={() => setShowUploadModal(true)}\n            className=\"px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 flex items-center gap-2 mx-auto\"\n          >\n            <Upload className=\"w-5 h-5\" />\n            Choisir un fichier JSON\n          </button>\n        </div>\n      )}\n\n      {/* Project Info */}\n      {projectData && (\n        <div className=\"bg-green-50 p-4 rounded-lg mb-6\">\n          <h3 className=\"font-semibold text-green-800 mb-3 flex items-center gap-2\">\n            <Package className=\"w-5 h-5\" />\n            Projet : {projectData.project.name}\n          </h3>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n            <div>\n              <div className=\"text-2xl font-bold text-green-600\">{risers.length}</div>\n              <div className=\"text-sm text-gray-600\">Contremarches</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-blue-600\">\n                {(risers.reduce((sum, r) => sum + (r.width * r.height), 0) / 1000000).toFixed(2)}\n              </div>\n              <div className=\"text-sm text-gray-600\">m² total</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-purple-600\">\n                {Math.max(...risers.map(r => r.width))}\n              </div>\n              <div className=\"text-sm text-gray-600\">Largeur max (mm)</div>\n            </div>\n            <div>\n              <div className=\"text-2xl font-bold text-orange-600\">\n                {Math.max(...risers.map(r => r.height))}\n              </div>\n              <div className=\"text-sm text-gray-600\">Hauteur max (mm)</div>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Configuration */}\n      {projectData && (\n        <div className=\"grid md:grid-cols-2 gap-6 mb-6\">\n          {/* General Parameters */}\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\n            <h3 className=\"font-semibold text-gray-800 mb-3\">Paramètres généraux</h3>\n            <div className=\"space-y-3\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                  Largeur de scie (mm)\n                </label>\n                <input\n                  type=\"number\"\n                  value={sawThickness}\n                  onChange={(e) => setSawThickness(parseInt(e.target.value) || 10)}\n                  min=\"0\"\n                  max=\"50\"\n                  className=\"w-full p-2 border border-gray-300 rounded-md\"\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Large Planks */}\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <div className=\"flex justify-between items-center mb-3\">\n              <h3 className=\"font-semibold text-blue-800 flex items-center gap-2\">\n                <Package className=\"w-5 h-5\" />\n                Grandes planches disponibles\n              </h3>\n              <button\n                onClick={addNewPlank}\n                className=\"px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 flex items-center gap-1\"\n              >\n                <Plus className=\"w-4 h-4\" />\n                Ajouter\n              </button>\n            </div>\n            \n            <div className=\"space-y-2\">\n              {largePlanks.map((plank) => (\n                <div key={plank.id} className=\"p-3 bg-white rounded border\">\n                  <div className=\"grid grid-cols-2 md:grid-cols-4 gap-2 mb-2\">\n                    <div>\n                      <label className=\"block text-xs font-medium text-gray-700 mb-1\">Largeur (mm)</label>\n                      <input\n                        type=\"number\"\n                        value={plank.width}\n                        onChange={(e) => updatePlank(plank.id, 'width', parseInt(e.target.value) || 0)}\n                        className=\"w-full p-1 text-sm border border-gray-300 rounded\"\n                        min=\"1\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium text-gray-700 mb-1\">Hauteur (mm)</label>\n                      <input\n                        type=\"number\"\n                        value={plank.height}\n                        onChange={(e) => updatePlank(plank.id, 'height', parseInt(e.target.value) || 0)}\n                        className=\"w-full p-1 text-sm border border-gray-300 rounded\"\n                        min=\"1\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium text-gray-700 mb-1\">Prix (€)</label>\n                      <input\n                        type=\"number\"\n                        value={plank.price}\n                        onChange={(e) => updatePlank(plank.id, 'price', parseFloat(e.target.value) || 0)}\n                        className=\"w-full p-1 text-sm border border-gray-300 rounded\"\n                        min=\"0\"\n                        step=\"0.01\"\n                      />\n                    </div>\n                    <div>\n                      <label className=\"block text-xs font-medium text-gray-700 mb-1\">Quantité max</label>\n                      <input\n                        type=\"number\"\n                        value={plank.maxQuantity || ''}\n                        onChange={(e) => updatePlank(plank.id, 'maxQuantity', e.target.value ? parseInt(e.target.value) : null)}\n                        className=\"w-full p-1 text-sm border border-gray-300 rounded\"\n                        min=\"1\"\n                        placeholder=\"Illimité\"\n                      />\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-sm text-gray-600\">\n                      {generatePlankName(plank.width, plank.height)} - {plank.price}€\n                      {plank.maxQuantity ? ` (max: ${plank.maxQuantity})` : ' (illimité)'}\n                    </div>\n                    <button\n                      onClick={() => deletePlank(plank.id)}\n                      className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\n                      title=\"Supprimer cette planche\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Calculate Button */}\n      {projectData && (\n        <div className=\"text-center mb-6\">\n          <button\n            onClick={optimizeCutting}\n            disabled={isCalculating || risers.length === 0}\n            className=\"px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center gap-2 mx-auto text-lg font-semibold\"\n          >\n            {isCalculating ? (\n              <>\n                <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\n                Calcul en cours...\n              </>\n            ) : (\n              <>\n                <Calculator className=\"w-5 h-5\" />\n                Calculer l'optimisation\n              </>\n            )}\n          </button>\n        </div>\n      )}\n\n      {/* Results */}\n      {optimizationResults && (\n        <div className=\"space-y-6\">\n          <div className=\"bg-green-100 p-4 rounded-lg\">\n            <h3 className=\"font-semibold text-green-800 mb-2 flex items-center gap-2\">\n              <Euro className=\"w-5 h-5\" />\n              Résultat de l'optimisation\n            </h3>\n            <div className=\"grid md:grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {optimizationResults.totalCost.toFixed(2)}€\n                </div>\n                <div className=\"text-sm text-gray-600\">Coût total</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {optimizationResults.totalPlanks}\n                </div>\n                <div className=\"text-sm text-gray-600\">Grandes planches</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {risers.length - optimizationResults.remainingPieces.length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Contremarches placées</div>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h3 className=\"font-semibold text-blue-800 mb-3 flex items-center gap-2\">\n              <Package className=\"w-5 h-5\" />\n              Récapitulatif des planches à commander\n            </h3>\n            <div className=\"space-y-2\">\n              {generatePlankSummary(optimizationResults)}\n              <div className=\"border-t pt-2 mt-3\">\n                <div className=\"flex justify-between items-center font-bold text-lg\">\n                  <span>Total à commander :</span>\n                  <span className=\"text-blue-600\">{optimizationResults.totalCost.toFixed(2)}€</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          <div>\n            <h3 className=\"font-semibold text-gray-800 mb-4\">Plan de découpe détaillé</h3>\n            <div className=\"space-y-4\">\n              {optimizationResults.solution.map((item, index) => generatePlankVisualization(item, index))}\n            </div>\n          </div>\n\n          {optimizationResults.remainingPieces.length > 0 && (\n            <div className=\"bg-red-50 p-4 rounded-lg\">\n              <h3 className=\"font-semibold text-red-800 mb-2\">\n                Contremarches non placées ({optimizationResults.remainingPieces.length})\n              </h3>\n              <div className=\"text-sm text-red-600\">\n                {optimizationResults.remainingPieces.map(p => p.name).join(', ')}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Upload Modal */}\n      {showUploadModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded-lg max-w-md w-full mx-4\">\n            <h3 className=\"text-lg font-semibold mb-4 text-blue-800\">\n              Importer les mesures\n            </h3>\n            \n            <div className=\"mb-4\">\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Fichier JSON de l'étape 1\n              </label>\n              <input\n                type=\"file\"\n                accept=\".json\"\n                onChange={handleFileUpload}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n              />\n            </div>\n            \n            <div className=\"flex justify-end gap-2\">\n              <button\n                onClick={() => setShowUploadModal(false)}\n                className=\"px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-md flex items-center gap-2\"\n              >\n                <X className=\"w-4 h-4\" />\n                Annuler\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Instructions */}\n      <div className=\"mt-8 bg-blue-50 p-4 rounded-lg\">\n        <h4 className=\"font-semibold text-blue-800 mb-2\">📋 Instructions</h4>\n        <div className=\"text-sm text-blue-700 space-y-1\">\n          <p><strong>1.</strong> Importez le fichier JSON exporté depuis l'étape 1</p>\n          <p><strong>2.</strong> Ajustez les paramètres de scie et les grandes planches disponibles</p>\n          <p><strong>3.</strong> Lancez l'optimisation pour obtenir le plan de découpe optimal</p>\n          <p><strong>4.</strong> Visualisez les résultats et le coût total</p>\n        </div>\n        <div className=\"mt-3 text-xs text-blue-600\">\n          L'algorithme optimise pour le coût total en tenant compte de l'efficacité de découpe et des prix des planches.\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RiserOptimizationApp;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}