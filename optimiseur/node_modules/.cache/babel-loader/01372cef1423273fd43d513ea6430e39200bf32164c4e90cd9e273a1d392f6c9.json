{"ast":null,"code":"import React,{useState}from'react';import{Calculator,Scissors,Euro,Package,Edit2,Plus,Trash2,Save,X}from'lucide-react';import{jsxs as _jsxs,jsx as _jsx,Fragment as _Fragment}from\"react/jsx-runtime\";const WoodCuttingOptimizer=()=>{const[results,setResults]=useState(null);const[isCalculating,setIsCalculating]=useState(false);const[editingPlank,setEditingPlank]=useState(null);const[showDeleteAllModal,setShowDeleteAllModal]=useState(false);const[sawThickness,setSawThickness]=useState(10);// 1cm = 10mm - maintenant configurable\n// Données des grandes planches (en mm) - maintenant modifiables\nconst[largePlanks,setLargePlanks]=useState([{id:1,width:900,height:400,price:7.92,maxQuantity:null},{id:2,width:1360,height:400,price:11.74,maxQuantity:null},{id:3,width:1810,height:400,price:17.73,maxQuantity:null}]);// Pièces à découper - maintenant sans quantité, chaque pièce est unique\nconst[pieces,setPieces]=useState([{id:1,width:700,height:200},{id:2,width:720,height:200},{id:3,width:710,height:200},{id:4,width:700,height:200},{id:5,width:720,height:200},{id:6,width:710,height:200},{id:7,width:700,height:200},{id:8,width:1130,height:200},{id:9,width:840,height:200},{id:10,width:1150,height:200},{id:11,width:690,height:200},{id:12,width:800,height:200},{id:13,width:780,height:200},{id:14,width:640,height:200},{id:15,width:'',height:''}// Ligne vide pour nouvelle pièce\n]);// Générer automatiquement le nom des planches\nconst generatePlankName=(width,height)=>{return`${Math.round(width/10)}x${Math.round(height/10)}cm`;};// Créer la liste complète des pièces (maintenant sans quantité)\nconst createPiecesList=piecesToCut=>{return piecesToCut.filter(piece=>piece.width&&piece.height)// Filtrer les pièces vides\n.map((piece,index)=>({...piece,instanceId:`piece-${piece.id}`,name:`${index+1}`,// Utiliser l'index + 1 pour la numérotation continue\noriginalIndex:index}));};// Fonctions pour gérer les pièces\nconst updatePiece=(id,field,value)=>{setPieces(prev=>{const updatedPieces=prev.map(p=>p.id===id?{...p,[field]:value}:p);// Si on vient de remplir une pièce qui était vide, créer une nouvelle ligne vide\nconst updatedPiece=updatedPieces.find(p=>p.id===id);const isLastPiece=id===Math.max(...updatedPieces.map(p=>p.id));if(isLastPiece&&updatedPiece.width&&updatedPiece.height){const newId=Math.max(...updatedPieces.map(p=>p.id))+1;updatedPieces.push({id:newId,width:'',height:''});}return updatedPieces;});};const deletePiece=id=>{setPieces(prev=>prev.filter(p=>p.id!==id));};// Fonction pour copier la pièce précédente\nconst copyPreviousPiece=currentId=>{const currentIndex=pieces.findIndex(p=>p.id===currentId);if(currentIndex>0){const previousPiece=pieces[currentIndex-1];updatePiece(currentId,'width',previousPiece.width);updatePiece(currentId,'height',previousPiece.height);}};// Fonction pour obtenir le numéro d'affichage d'une pièce (numérotation continue)\nconst getPieceDisplayNumber=pieceId=>{const validPieces=pieces.filter(p=>p.width&&p.height);const pieceIndex=validPieces.findIndex(p=>p.id===pieceId);return pieceIndex>=0?pieceIndex+1:'Nouveau';};// Fonction pour supprimer toutes les pièces\nconst deleteAllPieces=()=>{setPieces([{id:1,width:'',height:''}]);setResults(null);// Effacer les résultats\nsetShowDeleteAllModal(false);};// Fonction pour gérer le focus sur la pièce suivante\nconst handleHeightKeyDown=(e,currentId)=>{if(e.key==='Tab'&&!e.shiftKey){e.preventDefault();const nextId=currentId+1;const nextWidthInput=document.getElementById(`width-${nextId}`);if(nextWidthInput){nextWidthInput.focus();}}};// Calculer le meilleur arrangement pour une planche\nconst calculateBestArrangement=(pieces,plankType)=>{const arrangements=[];// Fonction récursive pour placer les pièces\nconst placePieces=function(remainingPieces){let placedPieces=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[];if(placedPieces.length>0){const totalValue=placedPieces.reduce((sum,p)=>sum+p.width*p.height,0);arrangements.push({pieces:[...placedPieces],totalValue,efficiency:totalValue/(plankType.width*plankType.height)});}// Essayer d'ajouter chaque pièce restante\nfor(let i=0;i<remainingPieces.length;i++){const piece=remainingPieces[i];// Essayer les deux orientations\nconst orientations=[{width:piece.width,height:piece.height,rotated:false},{width:piece.height,height:piece.width,rotated:true}];for(const orientation of orientations){const position=findBestPosition(orientation,placedPieces,plankType);if(position){const newPiece={...piece,rotated:orientation.rotated,x:position.x,y:position.y,displayWidth:orientation.width,displayHeight:orientation.height};placePieces(remainingPieces.filter((_,idx)=>idx!==i),[...placedPieces,newPiece]);}}}};// Trouver la meilleure position pour une pièce\nconst findBestPosition=(piece,placedPieces,plankType)=>{// Essayer de placer en (0,0) si c'est la première pièce\nif(placedPieces.length===0){if(piece.width<=plankType.width&&piece.height<=plankType.height){return{x:0,y:0};}return null;}// Générer les positions possibles\nconst positions=[];// Positions à droite des pièces existantes\nplacedPieces.forEach(existing=>{positions.push({x:existing.x+existing.displayWidth+sawThickness,y:existing.y});});// Positions en dessous des pièces existantes\nplacedPieces.forEach(existing=>{positions.push({x:existing.x,y:existing.y+existing.displayHeight+sawThickness});});// Trier les positions par x puis par y (placement de gauche à droite, haut en bas)\npositions.sort((a,b)=>a.x-b.x||a.y-b.y);// Tester chaque position\nfor(const pos of positions){if(canPlaceAt(piece,pos,placedPieces,plankType)){return pos;}}return null;};// Vérifier si une pièce peut être placée à une position donnée\nconst canPlaceAt=(piece,position,placedPieces,plankType)=>{// Vérifier les limites de la planche\nif(position.x+piece.width>plankType.width||position.y+piece.height>plankType.height){return false;}// Vérifier les collisions avec les pièces existantes\nfor(const existing of placedPieces){if(!(position.x>=existing.x+existing.displayWidth+sawThickness||position.x+piece.width+sawThickness<=existing.x||position.y>=existing.y+existing.displayHeight+sawThickness||position.y+piece.height+sawThickness<=existing.y)){return false;}}return true;};placePieces(pieces);// Retourner le meilleur arrangement\nreturn arrangements.reduce((best,current)=>current.totalValue>best.totalValue?current:best,{pieces:[],totalValue:0,efficiency:0});};// Optimiser la découpe\nconst optimizeCutting=()=>{setIsCalculating(true);setTimeout(()=>{const allPieces=createPiecesList(pieces);const solution=[];let remainingPieces=[...allPieces];const plankUsage={};// Compteur d'utilisation par type de planche\n// Initialiser les compteurs\nlargePlanks.forEach(plank=>{plankUsage[plank.id]=0;});while(remainingPieces.length>0){let bestOption=null;let bestEfficiency=0;// Tester chaque type de grande planche\nfor(const plankType of largePlanks){// Vérifier si on peut encore utiliser ce type de planche\nif(plankType.maxQuantity&&plankUsage[plankType.id]>=plankType.maxQuantity){continue;}const arrangement=calculateBestArrangement(remainingPieces,plankType);const costPerArea=plankType.price/(plankType.width*plankType.height);const efficiency=arrangement.efficiency/costPerArea;if(efficiency>bestEfficiency&&arrangement.pieces.length>0){bestEfficiency=efficiency;bestOption={plankType,arrangement,costPerArea};}}if(bestOption){solution.push(bestOption);plankUsage[bestOption.plankType.id]++;// Retirer les pièces utilisées\nremainingPieces=remainingPieces.filter(piece=>!bestOption.arrangement.pieces.some(used=>used.instanceId===piece.instanceId));}else{// Si aucune pièce ne peut être placée, essayer avec les planches disponibles\nconst piece=remainingPieces[0];const availablePlanks=largePlanks.filter(plank=>!plank.maxQuantity||plankUsage[plank.id]<plank.maxQuantity);const suitablePlank=availablePlanks.find(plank=>{const fitNormal=piece.width<=plank.width&&piece.height<=plank.height;const fitRotated=piece.height<=plank.width&&piece.width<=plank.height;return fitNormal||fitRotated;});if(suitablePlank){const rotated=!(piece.width<=suitablePlank.width&&piece.height<=suitablePlank.height);solution.push({plankType:suitablePlank,arrangement:{pieces:[{...piece,rotated,x:0,y:0,displayWidth:rotated?piece.height:piece.width,displayHeight:rotated?piece.width:piece.height}],totalValue:piece.width*piece.height,efficiency:piece.width*piece.height/(suitablePlank.width*suitablePlank.height)},costPerArea:suitablePlank.price/(suitablePlank.width*suitablePlank.height)});plankUsage[suitablePlank.id]++;remainingPieces=remainingPieces.filter(p=>p.instanceId!==piece.instanceId);}else{break;// Impossible de placer cette pièce\n}}}setResults({solution,totalCost:solution.reduce((sum,s)=>sum+s.plankType.price,0),totalPlanks:solution.length,remainingPieces,plankUsage});setIsCalculating(false);},100);};// Édition des planches\nconst editPlank=plank=>{setEditingPlank({...plank});};const savePlank=()=>{const plankWithName={...editingPlank,name:generatePlankName(editingPlank.width,editingPlank.height)};if(editingPlank.id){// Modification d'une planche existante\nsetLargePlanks(prev=>prev.map(p=>p.id===editingPlank.id?plankWithName:p));}else{// Nouvelle planche\nconst newId=Math.max(...largePlanks.map(p=>p.id),0)+1;setLargePlanks(prev=>[...prev,{...plankWithName,id:newId}]);}setEditingPlank(null);};const deletePlank=id=>{setLargePlanks(prev=>prev.filter(p=>p.id!==id));};const addNewPlank=()=>{setEditingPlank({id:null,width:1000,height:400,price:10.00,maxQuantity:null});};const PlankVisualization=_ref=>{let{plankType,arrangement}=_ref;// Calculer l'échelle pour maintenir les proportions réelles\nconst maxDisplayWidth=400;const maxDisplayHeight=200;const scaleX=maxDisplayWidth/plankType.width;const scaleY=maxDisplayHeight/plankType.height;const scale=Math.min(scaleX,scaleY);const displayWidth=plankType.width*scale;const displayHeight=plankType.height*scale;return/*#__PURE__*/_jsxs(\"div\",{className:\"border border-gray-300 p-4 bg-amber-50\",children:[/*#__PURE__*/_jsxs(\"h4\",{className:\"font-semibold mb-2\",children:[generatePlankName(plankType.width,plankType.height),\" - \",plankType.price,\"\\u20AC\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex justify-center\",children:/*#__PURE__*/_jsx(\"div\",{className:\"relative border-2 border-amber-800 bg-amber-100\",style:{width:displayWidth,height:displayHeight},children:arrangement.pieces.map((piece,index)=>{const colors=['bg-blue-300','bg-green-300','bg-red-300','bg-purple-300','bg-yellow-300','bg-pink-300','bg-indigo-300','bg-orange-300'];const color=colors[piece.originalIndex%colors.length];return/*#__PURE__*/_jsx(\"div\",{className:`absolute border border-gray-700 ${color} flex items-center justify-center text-xs font-bold shadow-sm`,style:{width:piece.displayWidth*scale,height:piece.displayHeight*scale,left:piece.x*scale,top:piece.y*scale},children:/*#__PURE__*/_jsxs(\"div\",{className:\"text-center leading-tight\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-bold\",children:piece.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-xs\",children:[piece.width,\"\\xD7\",piece.height]}),piece.rotated&&/*#__PURE__*/_jsx(\"div\",{className:\"text-xs\",children:\"\\u21BB\"})]})},piece.instanceId);})})}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2 text-sm text-gray-600 text-center\",children:[\"Pi\\xE8ces: \",arrangement.pieces.length,\" | Efficacit\\xE9: \",(arrangement.efficiency*100).toFixed(1),\"%\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-1 text-xs text-gray-500 text-center\",children:[\"Dimensions: \",plankType.width,\"\\xD7\",plankType.height,\"mm | \\xC9chelle: 1:\",Math.round(1/scale)]})]});};return/*#__PURE__*/_jsxs(\"div\",{className:\"max-w-6xl mx-auto p-6 bg-white min-h-screen\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"mb-6\",children:[/*#__PURE__*/_jsxs(\"h1\",{className:\"text-3xl font-bold text-gray-800 mb-2 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Scissors,{className:\"text-blue-600\"}),\"Optimiseur de D\\xE9coupe de Planches\"]}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-600\",children:\"Outil interactif pour optimiser le co\\xFBt total des grandes planches\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid md:grid-cols-2 gap-6 mb-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gray-50 p-4 rounded-lg\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"font-semibold text-gray-800 mb-3\",children:\"Param\\xE8tres g\\xE9n\\xE9raux\"}),/*#__PURE__*/_jsx(\"div\",{className:\"space-y-3\",children:/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-700 mb-1\",children:\"Largeur de scie (mm)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:sawThickness,onChange:e=>setSawThickness(parseInt(e.target.value)||0),className:\"w-full p-2 border border-gray-300 rounded-md\",min:\"0\",max:\"50\"})]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-blue-50 p-4 rounded-lg\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-3\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"font-semibold text-blue-800 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Package,{className:\"w-5 h-5\"}),\"Grandes planches disponibles\"]}),/*#__PURE__*/_jsxs(\"button\",{onClick:addNewPlank,className:\"px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 flex items-center gap-1\",children:[/*#__PURE__*/_jsx(Plus,{className:\"w-4 h-4\"}),\"Ajouter\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"space-y-2\",children:largePlanks.map(plank=>/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center justify-between p-2 bg-white rounded border\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex-1\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-medium\",children:generatePlankName(plank.width,plank.height)}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-gray-600\",children:[plank.width,\"\\xD7\",plank.height,\"mm - \",plank.price,\"\\u20AC\",plank.maxQuantity&&/*#__PURE__*/_jsxs(\"span\",{className:\"ml-1\",children:[\"(max: \",plank.maxQuantity,\")\"]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex gap-1\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>editPlank(plank),className:\"p-1 text-blue-600 hover:bg-blue-100 rounded\",children:/*#__PURE__*/_jsx(Edit2,{className:\"w-4 h-4\"})}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>deletePlank(plank.id),className:\"p-1 text-red-600 hover:bg-red-100 rounded\",children:/*#__PURE__*/_jsx(Trash2,{className:\"w-4 h-4\"})})]})]},plank.id))})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-green-50 p-4 rounded-lg mb-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center mb-3\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"font-semibold text-green-800 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Calculator,{className:\"w-5 h-5\"}),\"Pi\\xE8ces \\xE0 d\\xE9couper\"]}),/*#__PURE__*/_jsxs(\"button\",{onClick:()=>setShowDeleteAllModal(true),className:\"px-3 py-1 bg-red-600 text-white rounded text-sm hover:bg-red-700 flex items-center gap-1\",disabled:pieces.filter(p=>p.width&&p.height).length===0,children:[/*#__PURE__*/_jsx(Trash2,{className:\"w-4 h-4\"}),\"Tout supprimer\"]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"grid gap-2\",children:pieces.map((piece,index)=>{const isLastPiece=index===pieces.length-1;const isEmpty=!piece.width&&!piece.height;const displayNumber=getPieceDisplayNumber(piece.id);const previousPiece=index>0?pieces[index-1]:null;const canCopyPrevious=isLastPiece&&isEmpty&&previousPiece&&previousPiece.width&&previousPiece.height;return/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-3 p-2 bg-white rounded border\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"font-medium text-green-800 w-12 text-sm\",children:displayNumber}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-2\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"text-sm font-medium text-gray-700\",children:\"Largeur:\"}),/*#__PURE__*/_jsx(\"input\",{id:`width-${piece.id}`,type:\"number\",value:piece.width,onChange:e=>updatePiece(piece.id,'width',parseInt(e.target.value)||''),className:\"w-20 p-1 border border-gray-300 rounded text-sm\",min:\"1\",placeholder:\"mm\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-2\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"text-sm font-medium text-gray-700\",children:\"Hauteur:\"}),/*#__PURE__*/_jsx(\"input\",{id:`height-${piece.id}`,type:\"number\",value:piece.height,onChange:e=>updatePiece(piece.id,'height',parseInt(e.target.value)||''),onKeyDown:e=>handleHeightKeyDown(e,piece.id),className:\"w-20 p-1 border border-gray-300 rounded text-sm\",min:\"1\",placeholder:\"mm\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex items-center gap-1\",children:[canCopyPrevious&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>copyPreviousPiece(piece.id),className:\"px-2 py-1 text-xs bg-blue-100 text-blue-600 rounded hover:bg-blue-200\",title:`Copier la pièce précédente (${previousPiece.width}×${previousPiece.height})`,children:\"Copier\"}),!isLastPiece&&/*#__PURE__*/_jsx(\"button\",{onClick:()=>deletePiece(piece.id),className:\"p-1 text-red-600 hover:bg-red-100 rounded\",children:/*#__PURE__*/_jsx(Trash2,{className:\"w-4 h-4\"})})]})]},piece.id);})}),/*#__PURE__*/_jsx(\"div\",{className:\"mt-3 text-xs text-green-700\",children:\"Tapez Tab apr\\xE8s la hauteur pour passer \\xE0 la pi\\xE8ce suivante. Utilisez \\\"Copier\\\" pour reprendre les dimensions de la pi\\xE8ce pr\\xE9c\\xE9dente.\"})]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-center mb-6\",children:/*#__PURE__*/_jsx(\"button\",{onClick:optimizeCutting,disabled:isCalculating,className:\"px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2 mx-auto text-lg font-semibold\",children:isCalculating?/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"}),\"Calcul en cours...\"]}):/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(Calculator,{className:\"w-5 h-5\"}),\"Calculer l'optimisation\"]})})}),showDeleteAllModal&&/*#__PURE__*/_jsx(\"div\",{className:\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-6 rounded-lg max-w-md w-full mx-4\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold mb-4 text-red-800\",children:\"Supprimer toutes les pi\\xE8ces\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-gray-700 mb-6\",children:\"\\xCAtes-vous s\\xFBr de vouloir supprimer toutes les pi\\xE8ces \\xE0 d\\xE9couper ? Cette action est irr\\xE9versible et effacera \\xE9galement les r\\xE9sultats de calcul.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-end gap-2\",children:[/*#__PURE__*/_jsxs(\"button\",{onClick:()=>setShowDeleteAllModal(false),className:\"px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-md flex items-center gap-2\",children:[/*#__PURE__*/_jsx(X,{className:\"w-4 h-4\"}),\"Annuler\"]}),/*#__PURE__*/_jsxs(\"button\",{onClick:deleteAllPieces,className:\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Trash2,{className:\"w-4 h-4\"}),\"Supprimer tout\"]})]})]})}),editingPlank&&/*#__PURE__*/_jsx(\"div\",{className:\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"bg-white p-6 rounded-lg max-w-md w-full mx-4\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"text-lg font-semibold mb-4\",children:editingPlank.id?'Modifier la planche':'Nouvelle planche'}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-2 gap-4\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-700 mb-1\",children:\"Largeur (mm)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:editingPlank.width,onChange:e=>setEditingPlank({...editingPlank,width:parseInt(e.target.value)||0}),className:\"w-full p-2 border border-gray-300 rounded-md\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-700 mb-1\",children:\"Hauteur (mm)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:editingPlank.height,onChange:e=>setEditingPlank({...editingPlank,height:parseInt(e.target.value)||0}),className:\"w-full p-2 border border-gray-300 rounded-md\"})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-gray-600 bg-gray-50 p-2 rounded\",children:[\"Nom g\\xE9n\\xE9r\\xE9 automatiquement : \",/*#__PURE__*/_jsx(\"strong\",{children:generatePlankName(editingPlank.width,editingPlank.height)})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid grid-cols-2 gap-4\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-700 mb-1\",children:\"Prix (\\u20AC)\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",step:\"0.01\",value:editingPlank.price,onChange:e=>setEditingPlank({...editingPlank,price:parseFloat(e.target.value)||0}),className:\"w-full p-2 border border-gray-300 rounded-md\"})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"label\",{className:\"block text-sm font-medium text-gray-700 mb-1\",children:\"Quantit\\xE9 max\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",value:editingPlank.maxQuantity||'',onChange:e=>setEditingPlank({...editingPlank,maxQuantity:e.target.value?parseInt(e.target.value):null}),className:\"w-full p-2 border border-gray-300 rounded-md\",placeholder:\"Illimit\\xE9\"})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-end gap-2 mt-6\",children:[/*#__PURE__*/_jsxs(\"button\",{onClick:()=>setEditingPlank(null),className:\"px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-md flex items-center gap-2\",children:[/*#__PURE__*/_jsx(X,{className:\"w-4 h-4\"}),\"Annuler\"]}),/*#__PURE__*/_jsxs(\"button\",{onClick:savePlank,className:\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Save,{className:\"w-4 h-4\"}),\"Sauvegarder\"]})]})]})}),results&&/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-6\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"bg-green-100 p-4 rounded-lg\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"font-semibold text-green-800 mb-2 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Euro,{className:\"w-5 h-5\"}),\"R\\xE9sultat de l'optimisation\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"grid md:grid-cols-3 gap-4\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"text-2xl font-bold text-green-600\",children:[results.totalCost.toFixed(2),\"\\u20AC\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-600\",children:\"Co\\xFBt total\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-blue-600\",children:results.totalPlanks}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-600\",children:\"Grandes planches\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"text-2xl font-bold text-purple-600\",children:pieces.filter(p=>p.width&&p.height).length-results.remainingPieces.length}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-gray-600\",children:\"Pi\\xE8ces plac\\xE9es\"})]})]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-blue-50 p-4 rounded-lg\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"font-semibold text-blue-800 mb-3 flex items-center gap-2\",children:[/*#__PURE__*/_jsx(Package,{className:\"w-5 h-5\"}),\"R\\xE9capitulatif des planches \\xE0 commander\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"space-y-2\",children:[largePlanks.map(plank=>{const count=results.solution.filter(s=>s.plankType.id===plank.id).length;if(count>0){return/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center p-2 bg-white rounded border\",children:[/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"span\",{className:\"font-medium\",children:generatePlankName(plank.width,plank.height)}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-sm text-gray-600 ml-2\",children:[\"(\",plank.width,\"\\xD7\",plank.height,\"mm)\"]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-right\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"font-semibold text-blue-600\",children:[count,\" planche\",count>1?'s':'']}),/*#__PURE__*/_jsxs(\"div\",{className:\"text-sm text-gray-600\",children:[count,\" \\xD7 \",plank.price,\"\\u20AC = \",(count*plank.price).toFixed(2),\"\\u20AC\"]})]})]},plank.id);}return null;}),/*#__PURE__*/_jsx(\"div\",{className:\"border-t pt-2 mt-3\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between items-center font-bold text-lg\",children:[/*#__PURE__*/_jsx(\"span\",{children:\"Total \\xE0 commander :\"}),/*#__PURE__*/_jsxs(\"span\",{className:\"text-blue-600\",children:[results.totalCost.toFixed(2),\"\\u20AC\"]})]})})]})]}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{className:\"font-semibold text-gray-800 mb-4\",children:\"Plan de d\\xE9coupe d\\xE9taill\\xE9\"}),/*#__PURE__*/_jsx(\"div\",{className:\"space-y-4\",children:results.solution.map((item,index)=>/*#__PURE__*/_jsx(PlankVisualization,{plankType:item.plankType,arrangement:item.arrangement},index))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gray-50 p-4 rounded-lg\",children:[/*#__PURE__*/_jsx(\"h3\",{className:\"font-semibold text-gray-800 mb-3\",children:\"D\\xE9tail de l'utilisation\"}),largePlanks.map(plank=>{const plankUsages=results.solution.filter(s=>s.plankType.id===plank.id);if(plankUsages.length>0){return/*#__PURE__*/_jsxs(\"div\",{className:\"mb-3\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"font-medium text-gray-700 mb-1\",children:[generatePlankName(plank.width,plank.height),\" (\",plankUsages.length,\"/\",plank.maxQuantity||'∞',\") :\"]}),plankUsages.map((usage,index)=>/*#__PURE__*/_jsxs(\"div\",{className:\"ml-4 text-sm text-gray-600\",children:[\"Planche \",index+1,\": \",usage.arrangement.pieces.length,\" pi\\xE8ce\",usage.arrangement.pieces.length>1?'s':'',\"(\",usage.arrangement.pieces.map(p=>p.name).join(', '),\") - Efficacit\\xE9: \",(usage.arrangement.efficiency*100).toFixed(1),\"%\"]},index))]},plank.id);}return null;})]}),results.remainingPieces.length>0&&/*#__PURE__*/_jsxs(\"div\",{className:\"bg-red-50 p-4 rounded-lg\",children:[/*#__PURE__*/_jsxs(\"h3\",{className:\"font-semibold text-red-800 mb-2\",children:[\"Pi\\xE8ces non plac\\xE9es (\",results.remainingPieces.length,\")\"]}),/*#__PURE__*/_jsx(\"div\",{className:\"text-sm text-red-600\",children:results.remainingPieces.map(piece=>piece.name).join(', ')})]})]})]});};export default WoodCuttingOptimizer;","map":{"version":3,"names":["React","useState","Calculator","Scissors","Euro","Package","Edit2","Plus","Trash2","Save","X","jsxs","_jsxs","jsx","_jsx","Fragment","_Fragment","WoodCuttingOptimizer","results","setResults","isCalculating","setIsCalculating","editingPlank","setEditingPlank","showDeleteAllModal","setShowDeleteAllModal","sawThickness","setSawThickness","largePlanks","setLargePlanks","id","width","height","price","maxQuantity","pieces","setPieces","generatePlankName","Math","round","createPiecesList","piecesToCut","filter","piece","map","index","instanceId","name","originalIndex","updatePiece","field","value","prev","updatedPieces","p","updatedPiece","find","isLastPiece","max","newId","push","deletePiece","copyPreviousPiece","currentId","currentIndex","findIndex","previousPiece","getPieceDisplayNumber","pieceId","validPieces","pieceIndex","deleteAllPieces","handleHeightKeyDown","e","key","shiftKey","preventDefault","nextId","nextWidthInput","document","getElementById","focus","calculateBestArrangement","plankType","arrangements","placePieces","remainingPieces","placedPieces","arguments","length","undefined","totalValue","reduce","sum","efficiency","i","orientations","rotated","orientation","position","findBestPosition","newPiece","x","y","displayWidth","displayHeight","_","idx","positions","forEach","existing","sort","a","b","pos","canPlaceAt","best","current","optimizeCutting","setTimeout","allPieces","solution","plankUsage","plank","bestOption","bestEfficiency","arrangement","costPerArea","some","used","availablePlanks","suitablePlank","fitNormal","fitRotated","totalCost","s","totalPlanks","editPlank","savePlank","plankWithName","deletePlank","addNewPlank","PlankVisualization","_ref","maxDisplayWidth","maxDisplayHeight","scaleX","scaleY","scale","min","className","children","style","colors","color","left","top","toFixed","type","onChange","parseInt","target","onClick","disabled","isEmpty","displayNumber","canCopyPrevious","placeholder","onKeyDown","title","step","parseFloat","count","item","plankUsages","usage","join"],"sources":["/Users/valentinbayard/Sublimarches/optimiseur/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport { Calculator, Scissors, Euro, Package, Edit2, Plus, Trash2, Save, X } from 'lucide-react';\n\nconst WoodCuttingOptimizer = () => {\n  const [results, setResults] = useState(null);\n  const [isCalculating, setIsCalculating] = useState(false);\n  const [editingPlank, setEditingPlank] = useState(null);\n  const [showDeleteAllModal, setShowDeleteAllModal] = useState(false);\n  const [sawThickness, setSawThickness] = useState(10); // 1cm = 10mm - maintenant configurable\n\n  // Données des grandes planches (en mm) - maintenant modifiables\n  const [largePlanks, setLargePlanks] = useState([\n    { id: 1, width: 900, height: 400, price: 7.92, maxQuantity: null },\n    { id: 2, width: 1360, height: 400, price: 11.74, maxQuantity: null },\n    { id: 3, width: 1810, height: 400, price: 17.73, maxQuantity: null }\n  ]);\n\n  // Pièces à découper - maintenant sans quantité, chaque pièce est unique\n  const [pieces, setPieces] = useState([\n    { id: 1, width: 700, height: 200 },\n    { id: 2, width: 720, height: 200 },\n    { id: 3, width: 710, height: 200 },\n    { id: 4, width: 700, height: 200 },\n    { id: 5, width: 720, height: 200 },\n    { id: 6, width: 710, height: 200 },\n    { id: 7, width: 700, height: 200 },\n    { id: 8, width: 1130, height: 200 },\n    { id: 9, width: 840, height: 200 },\n    { id: 10, width: 1150, height: 200 },\n    { id: 11, width: 690, height: 200 },\n    { id: 12, width: 800, height: 200 },\n    { id: 13, width: 780, height: 200 },\n    { id: 14, width: 640, height: 200 },\n    { id: 15, width: '', height: '' } // Ligne vide pour nouvelle pièce\n  ]);\n\n  // Générer automatiquement le nom des planches\n  const generatePlankName = (width, height) => {\n    return `${Math.round(width/10)}x${Math.round(height/10)}cm`;\n  };\n\n  // Créer la liste complète des pièces (maintenant sans quantité)\n  const createPiecesList = (piecesToCut) => {\n    return piecesToCut\n      .filter(piece => piece.width && piece.height) // Filtrer les pièces vides\n      .map((piece, index) => ({\n        ...piece,\n        instanceId: `piece-${piece.id}`,\n        name: `${index + 1}`, // Utiliser l'index + 1 pour la numérotation continue\n        originalIndex: index\n      }));\n  };\n\n  // Fonctions pour gérer les pièces\n  const updatePiece = (id, field, value) => {\n    setPieces(prev => {\n      const updatedPieces = prev.map(p => \n        p.id === id ? { ...p, [field]: value } : p\n      );\n      \n      // Si on vient de remplir une pièce qui était vide, créer une nouvelle ligne vide\n      const updatedPiece = updatedPieces.find(p => p.id === id);\n      const isLastPiece = id === Math.max(...updatedPieces.map(p => p.id));\n      \n      if (isLastPiece && updatedPiece.width && updatedPiece.height) {\n        const newId = Math.max(...updatedPieces.map(p => p.id)) + 1;\n        updatedPieces.push({ id: newId, width: '', height: '' });\n      }\n      \n      return updatedPieces;\n    });\n  };\n\n  const deletePiece = (id) => {\n    setPieces(prev => prev.filter(p => p.id !== id));\n  };\n\n  // Fonction pour copier la pièce précédente\n  const copyPreviousPiece = (currentId) => {\n    const currentIndex = pieces.findIndex(p => p.id === currentId);\n    if (currentIndex > 0) {\n      const previousPiece = pieces[currentIndex - 1];\n      updatePiece(currentId, 'width', previousPiece.width);\n      updatePiece(currentId, 'height', previousPiece.height);\n    }\n  };\n\n  // Fonction pour obtenir le numéro d'affichage d'une pièce (numérotation continue)\n  const getPieceDisplayNumber = (pieceId) => {\n    const validPieces = pieces.filter(p => p.width && p.height);\n    const pieceIndex = validPieces.findIndex(p => p.id === pieceId);\n    return pieceIndex >= 0 ? pieceIndex + 1 : 'Nouveau';\n  };\n\n  // Fonction pour supprimer toutes les pièces\n  const deleteAllPieces = () => {\n    setPieces([{ id: 1, width: '', height: '' }]);\n    setResults(null); // Effacer les résultats\n    setShowDeleteAllModal(false);\n  };\n\n  // Fonction pour gérer le focus sur la pièce suivante\n  const handleHeightKeyDown = (e, currentId) => {\n    if (e.key === 'Tab' && !e.shiftKey) {\n      e.preventDefault();\n      const nextId = currentId + 1;\n      const nextWidthInput = document.getElementById(`width-${nextId}`);\n      if (nextWidthInput) {\n        nextWidthInput.focus();\n      }\n    }\n  };\n\n  // Calculer le meilleur arrangement pour une planche\n  const calculateBestArrangement = (pieces, plankType) => {\n    const arrangements = [];\n    \n    // Fonction récursive pour placer les pièces\n    const placePieces = (remainingPieces, placedPieces = []) => {\n      if (placedPieces.length > 0) {\n        const totalValue = placedPieces.reduce((sum, p) => sum + (p.width * p.height), 0);\n        arrangements.push({\n          pieces: [...placedPieces],\n          totalValue,\n          efficiency: totalValue / (plankType.width * plankType.height)\n        });\n      }\n\n      // Essayer d'ajouter chaque pièce restante\n      for (let i = 0; i < remainingPieces.length; i++) {\n        const piece = remainingPieces[i];\n        \n        // Essayer les deux orientations\n        const orientations = [\n          { width: piece.width, height: piece.height, rotated: false },\n          { width: piece.height, height: piece.width, rotated: true }\n        ];\n        \n        for (const orientation of orientations) {\n          const position = findBestPosition(orientation, placedPieces, plankType);\n          if (position) {\n            const newPiece = {\n              ...piece,\n              rotated: orientation.rotated,\n              x: position.x,\n              y: position.y,\n              displayWidth: orientation.width,\n              displayHeight: orientation.height\n            };\n            \n            placePieces(\n              remainingPieces.filter((_, idx) => idx !== i),\n              [...placedPieces, newPiece]\n            );\n          }\n        }\n      }\n    };\n\n    // Trouver la meilleure position pour une pièce\n    const findBestPosition = (piece, placedPieces, plankType) => {\n      // Essayer de placer en (0,0) si c'est la première pièce\n      if (placedPieces.length === 0) {\n        if (piece.width <= plankType.width && piece.height <= plankType.height) {\n          return { x: 0, y: 0 };\n        }\n        return null;\n      }\n\n      // Générer les positions possibles\n      const positions = [];\n      \n      // Positions à droite des pièces existantes\n      placedPieces.forEach(existing => {\n        positions.push({\n          x: existing.x + existing.displayWidth + sawThickness,\n          y: existing.y\n        });\n      });\n      \n      // Positions en dessous des pièces existantes\n      placedPieces.forEach(existing => {\n        positions.push({\n          x: existing.x,\n          y: existing.y + existing.displayHeight + sawThickness\n        });\n      });\n\n      // Trier les positions par x puis par y (placement de gauche à droite, haut en bas)\n      positions.sort((a, b) => a.x - b.x || a.y - b.y);\n\n      // Tester chaque position\n      for (const pos of positions) {\n        if (canPlaceAt(piece, pos, placedPieces, plankType)) {\n          return pos;\n        }\n      }\n      \n      return null;\n    };\n\n    // Vérifier si une pièce peut être placée à une position donnée\n    const canPlaceAt = (piece, position, placedPieces, plankType) => {\n      // Vérifier les limites de la planche\n      if (position.x + piece.width > plankType.width || \n          position.y + piece.height > plankType.height) {\n        return false;\n      }\n\n      // Vérifier les collisions avec les pièces existantes\n      for (const existing of placedPieces) {\n        if (!(position.x >= existing.x + existing.displayWidth + sawThickness ||\n              position.x + piece.width + sawThickness <= existing.x ||\n              position.y >= existing.y + existing.displayHeight + sawThickness ||\n              position.y + piece.height + sawThickness <= existing.y)) {\n          return false;\n        }\n      }\n      \n      return true;\n    };\n\n    placePieces(pieces);\n    \n    // Retourner le meilleur arrangement\n    return arrangements.reduce((best, current) => \n      current.totalValue > best.totalValue ? current : best\n    , { pieces: [], totalValue: 0, efficiency: 0 });\n  };\n\n  // Optimiser la découpe\n  const optimizeCutting = () => {\n    setIsCalculating(true);\n    \n    setTimeout(() => {\n      const allPieces = createPiecesList(pieces);\n      const solution = [];\n      let remainingPieces = [...allPieces];\n      const plankUsage = {}; // Compteur d'utilisation par type de planche\n      \n      // Initialiser les compteurs\n      largePlanks.forEach(plank => {\n        plankUsage[plank.id] = 0;\n      });\n      \n      while (remainingPieces.length > 0) {\n        let bestOption = null;\n        let bestEfficiency = 0;\n        \n        // Tester chaque type de grande planche\n        for (const plankType of largePlanks) {\n          // Vérifier si on peut encore utiliser ce type de planche\n          if (plankType.maxQuantity && plankUsage[plankType.id] >= plankType.maxQuantity) {\n            continue;\n          }\n          \n          const arrangement = calculateBestArrangement(remainingPieces, plankType);\n          const costPerArea = plankType.price / (plankType.width * plankType.height);\n          const efficiency = arrangement.efficiency / costPerArea;\n          \n          if (efficiency > bestEfficiency && arrangement.pieces.length > 0) {\n            bestEfficiency = efficiency;\n            bestOption = {\n              plankType,\n              arrangement,\n              costPerArea\n            };\n          }\n        }\n        \n        if (bestOption) {\n          solution.push(bestOption);\n          plankUsage[bestOption.plankType.id]++;\n          // Retirer les pièces utilisées\n          remainingPieces = remainingPieces.filter(piece => \n            !bestOption.arrangement.pieces.some(used => used.instanceId === piece.instanceId)\n          );\n        } else {\n          // Si aucune pièce ne peut être placée, essayer avec les planches disponibles\n          const piece = remainingPieces[0];\n          const availablePlanks = largePlanks.filter(plank => \n            !plank.maxQuantity || plankUsage[plank.id] < plank.maxQuantity\n          );\n          \n          const suitablePlank = availablePlanks.find(plank => {\n            const fitNormal = piece.width <= plank.width && piece.height <= plank.height;\n            const fitRotated = piece.height <= plank.width && piece.width <= plank.height;\n            return fitNormal || fitRotated;\n          });\n          \n          if (suitablePlank) {\n            const rotated = !(piece.width <= suitablePlank.width && piece.height <= suitablePlank.height);\n            solution.push({\n              plankType: suitablePlank,\n              arrangement: { \n                pieces: [{\n                  ...piece,\n                  rotated,\n                  x: 0,\n                  y: 0,\n                  displayWidth: rotated ? piece.height : piece.width,\n                  displayHeight: rotated ? piece.width : piece.height\n                }], \n                totalValue: piece.width * piece.height,\n                efficiency: (piece.width * piece.height) / (suitablePlank.width * suitablePlank.height)\n              },\n              costPerArea: suitablePlank.price / (suitablePlank.width * suitablePlank.height)\n            });\n            plankUsage[suitablePlank.id]++;\n            remainingPieces = remainingPieces.filter(p => p.instanceId !== piece.instanceId);\n          } else {\n            break; // Impossible de placer cette pièce\n          }\n        }\n      }\n      \n      setResults({\n        solution,\n        totalCost: solution.reduce((sum, s) => sum + s.plankType.price, 0),\n        totalPlanks: solution.length,\n        remainingPieces,\n        plankUsage\n      });\n      \n      setIsCalculating(false);\n    }, 100);\n  };\n\n  // Édition des planches\n  const editPlank = (plank) => {\n    setEditingPlank({...plank});\n  };\n\n  const savePlank = () => {\n    const plankWithName = {\n      ...editingPlank,\n      name: generatePlankName(editingPlank.width, editingPlank.height)\n    };\n    \n    if (editingPlank.id) {\n      // Modification d'une planche existante\n      setLargePlanks(prev => prev.map(p => \n        p.id === editingPlank.id ? plankWithName : p\n      ));\n    } else {\n      // Nouvelle planche\n      const newId = Math.max(...largePlanks.map(p => p.id), 0) + 1;\n      setLargePlanks(prev => [...prev, { ...plankWithName, id: newId }]);\n    }\n    setEditingPlank(null);\n  };\n\n  const deletePlank = (id) => {\n    setLargePlanks(prev => prev.filter(p => p.id !== id));\n  };\n\n  const addNewPlank = () => {\n    setEditingPlank({\n      id: null,\n      width: 1000,\n      height: 400,\n      price: 10.00,\n      maxQuantity: null\n    });\n  };\n\n  const PlankVisualization = ({ plankType, arrangement }) => {\n    // Calculer l'échelle pour maintenir les proportions réelles\n    const maxDisplayWidth = 400;\n    const maxDisplayHeight = 200;\n    const scaleX = maxDisplayWidth / plankType.width;\n    const scaleY = maxDisplayHeight / plankType.height;\n    const scale = Math.min(scaleX, scaleY);\n    \n    const displayWidth = plankType.width * scale;\n    const displayHeight = plankType.height * scale;\n    \n    return (\n      <div className=\"border border-gray-300 p-4 bg-amber-50\">\n        <h4 className=\"font-semibold mb-2\">{generatePlankName(plankType.width, plankType.height)} - {plankType.price}€</h4>\n        <div className=\"flex justify-center\">\n          <div \n            className=\"relative border-2 border-amber-800 bg-amber-100\"\n            style={{\n              width: displayWidth,\n              height: displayHeight\n            }}\n          >\n            {arrangement.pieces.map((piece, index) => {\n              const colors = ['bg-blue-300', 'bg-green-300', 'bg-red-300', 'bg-purple-300', 'bg-yellow-300', 'bg-pink-300', 'bg-indigo-300', 'bg-orange-300'];\n              const color = colors[piece.originalIndex % colors.length];\n              \n              return (\n                <div\n                  key={piece.instanceId}\n                  className={`absolute border border-gray-700 ${color} flex items-center justify-center text-xs font-bold shadow-sm`}\n                  style={{\n                    width: piece.displayWidth * scale,\n                    height: piece.displayHeight * scale,\n                    left: piece.x * scale,\n                    top: piece.y * scale\n                  }}\n                >\n                  <div className=\"text-center leading-tight\">\n                    <div className=\"font-bold\">{piece.name}</div>\n                    <div className=\"text-xs\">{piece.width}×{piece.height}</div>\n                    {piece.rotated && <div className=\"text-xs\">↻</div>}\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n        <div className=\"mt-2 text-sm text-gray-600 text-center\">\n          Pièces: {arrangement.pieces.length} | \n          Efficacité: {(arrangement.efficiency * 100).toFixed(1)}%\n        </div>\n        <div className=\"mt-1 text-xs text-gray-500 text-center\">\n          Dimensions: {plankType.width}×{plankType.height}mm | Échelle: 1:{Math.round(1/scale)}\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6 bg-white min-h-screen\">\n      <div className=\"mb-6\">\n        <h1 className=\"text-3xl font-bold text-gray-800 mb-2 flex items-center gap-2\">\n          <Scissors className=\"text-blue-600\" />\n          Optimiseur de Découpe de Planches\n        </h1>\n        <p className=\"text-gray-600\">\n          Outil interactif pour optimiser le coût total des grandes planches\n        </p>\n      </div>\n\n      {/* Configuration */}\n      <div className=\"grid md:grid-cols-2 gap-6 mb-6\">\n        {/* Paramètres généraux */}\n        <div className=\"bg-gray-50 p-4 rounded-lg\">\n          <h3 className=\"font-semibold text-gray-800 mb-3\">Paramètres généraux</h3>\n          <div className=\"space-y-3\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                Largeur de scie (mm)\n              </label>\n              <input\n                type=\"number\"\n                value={sawThickness}\n                onChange={(e) => setSawThickness(parseInt(e.target.value) || 0)}\n                className=\"w-full p-2 border border-gray-300 rounded-md\"\n                min=\"0\"\n                max=\"50\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Grandes planches */}\n        <div className=\"bg-blue-50 p-4 rounded-lg\">\n          <div className=\"flex justify-between items-center mb-3\">\n            <h3 className=\"font-semibold text-blue-800 flex items-center gap-2\">\n              <Package className=\"w-5 h-5\" />\n              Grandes planches disponibles\n            </h3>\n            <button\n              onClick={addNewPlank}\n              className=\"px-3 py-1 bg-blue-600 text-white rounded text-sm hover:bg-blue-700 flex items-center gap-1\"\n            >\n              <Plus className=\"w-4 h-4\" />\n              Ajouter\n            </button>\n          </div>\n          \n          <div className=\"space-y-2\">\n            {largePlanks.map((plank) => (\n              <div key={plank.id} className=\"flex items-center justify-between p-2 bg-white rounded border\">\n                <div className=\"flex-1\">\n                  <div className=\"font-medium\">{generatePlankName(plank.width, plank.height)}</div>\n                  <div className=\"text-sm text-gray-600\">\n                    {plank.width}×{plank.height}mm - {plank.price}€\n                    {plank.maxQuantity && <span className=\"ml-1\">(max: {plank.maxQuantity})</span>}\n                  </div>\n                </div>\n                <div className=\"flex gap-1\">\n                  <button\n                    onClick={() => editPlank(plank)}\n                    className=\"p-1 text-blue-600 hover:bg-blue-100 rounded\"\n                  >\n                    <Edit2 className=\"w-4 h-4\" />\n                  </button>\n                  <button\n                    onClick={() => deletePlank(plank.id)}\n                    className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Pièces à découper */}\n      <div className=\"bg-green-50 p-4 rounded-lg mb-6\">\n        <div className=\"flex justify-between items-center mb-3\">\n          <h3 className=\"font-semibold text-green-800 flex items-center gap-2\">\n            <Calculator className=\"w-5 h-5\" />\n            Pièces à découper\n          </h3>\n          <button\n            onClick={() => setShowDeleteAllModal(true)}\n            className=\"px-3 py-1 bg-red-600 text-white rounded text-sm hover:bg-red-700 flex items-center gap-1\"\n            disabled={pieces.filter(p => p.width && p.height).length === 0}\n          >\n            <Trash2 className=\"w-4 h-4\" />\n            Tout supprimer\n          </button>\n        </div>\n        \n        <div className=\"grid gap-2\">\n          {pieces.map((piece, index) => {\n            const isLastPiece = index === pieces.length - 1;\n            const isEmpty = !piece.width && !piece.height;\n            const displayNumber = getPieceDisplayNumber(piece.id);\n            const previousPiece = index > 0 ? pieces[index - 1] : null;\n            const canCopyPrevious = isLastPiece && isEmpty && previousPiece && previousPiece.width && previousPiece.height;\n            \n            return (\n              <div key={piece.id} className=\"flex items-center gap-3 p-2 bg-white rounded border\">\n                <div className=\"font-medium text-green-800 w-12 text-sm\">\n                  {displayNumber}\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <label className=\"text-sm font-medium text-gray-700\">Largeur:</label>\n                  <input\n                    id={`width-${piece.id}`}\n                    type=\"number\"\n                    value={piece.width}\n                    onChange={(e) => updatePiece(piece.id, 'width', parseInt(e.target.value) || '')}\n                    className=\"w-20 p-1 border border-gray-300 rounded text-sm\"\n                    min=\"1\"\n                    placeholder=\"mm\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center gap-2\">\n                  <label className=\"text-sm font-medium text-gray-700\">Hauteur:</label>\n                  <input\n                    id={`height-${piece.id}`}\n                    type=\"number\"\n                    value={piece.height}\n                    onChange={(e) => updatePiece(piece.id, 'height', parseInt(e.target.value) || '')}\n                    onKeyDown={(e) => handleHeightKeyDown(e, piece.id)}\n                    className=\"w-20 p-1 border border-gray-300 rounded text-sm\"\n                    min=\"1\"\n                    placeholder=\"mm\"\n                  />\n                </div>\n                \n                <div className=\"flex items-center gap-1\">\n                  {canCopyPrevious && (\n                    <button\n                      onClick={() => copyPreviousPiece(piece.id)}\n                      className=\"px-2 py-1 text-xs bg-blue-100 text-blue-600 rounded hover:bg-blue-200\"\n                      title={`Copier la pièce précédente (${previousPiece.width}×${previousPiece.height})`}\n                    >\n                      Copier\n                    </button>\n                  )}\n                  \n                  {!isLastPiece && (\n                    <button\n                      onClick={() => deletePiece(piece.id)}\n                      className=\"p-1 text-red-600 hover:bg-red-100 rounded\"\n                    >\n                      <Trash2 className=\"w-4 h-4\" />\n                    </button>\n                  )}\n                </div>\n              </div>\n            );\n          })}\n        </div>\n        \n        <div className=\"mt-3 text-xs text-green-700\">\n          Tapez Tab après la hauteur pour passer à la pièce suivante. Utilisez \"Copier\" pour reprendre les dimensions de la pièce précédente.\n        </div>\n      </div>\n\n      {/* Bouton de calcul */}\n      <div className=\"text-center mb-6\">\n        <button\n          onClick={optimizeCutting}\n          disabled={isCalculating}\n          className=\"px-8 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 flex items-center gap-2 mx-auto text-lg font-semibold\"\n        >\n          {isCalculating ? (\n            <>\n              <div className=\"animate-spin rounded-full h-5 w-5 border-b-2 border-white\"></div>\n              Calcul en cours...\n            </>\n          ) : (\n            <>\n              <Calculator className=\"w-5 h-5\" />\n              Calculer l'optimisation\n            </>\n          )}\n        </button>\n      </div>\n\n      {/* Modal de suppression de toutes les pièces */}\n      {showDeleteAllModal && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded-lg max-w-md w-full mx-4\">\n            <h3 className=\"text-lg font-semibold mb-4 text-red-800\">\n              Supprimer toutes les pièces\n            </h3>\n            \n            <p className=\"text-gray-700 mb-6\">\n              Êtes-vous sûr de vouloir supprimer toutes les pièces à découper ? \n              Cette action est irréversible et effacera également les résultats de calcul.\n            </p>\n            \n            <div className=\"flex justify-end gap-2\">\n              <button\n                onClick={() => setShowDeleteAllModal(false)}\n                className=\"px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-md flex items-center gap-2\"\n              >\n                <X className=\"w-4 h-4\" />\n                Annuler\n              </button>\n              <button\n                onClick={deleteAllPieces}\n                className=\"px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 flex items-center gap-2\"\n              >\n                <Trash2 className=\"w-4 h-4\" />\n                Supprimer tout\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Modal d'édition */}\n      {editingPlank && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white p-6 rounded-lg max-w-md w-full mx-4\">\n            <h3 className=\"text-lg font-semibold mb-4\">\n              {editingPlank.id ? 'Modifier la planche' : 'Nouvelle planche'}\n            </h3>\n            \n            <div className=\"space-y-4\">            \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Largeur (mm)</label>\n                  <input\n                    type=\"number\"\n                    value={editingPlank.width}\n                    onChange={(e) => setEditingPlank({...editingPlank, width: parseInt(e.target.value) || 0})}\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Hauteur (mm)</label>\n                  <input\n                    type=\"number\"\n                    value={editingPlank.height}\n                    onChange={(e) => setEditingPlank({...editingPlank, height: parseInt(e.target.value) || 0})}\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  />\n                </div>\n              </div>\n              \n              <div className=\"text-sm text-gray-600 bg-gray-50 p-2 rounded\">\n                Nom généré automatiquement : <strong>{generatePlankName(editingPlank.width, editingPlank.height)}</strong>\n              </div>\n              \n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Prix (€)</label>\n                  <input\n                    type=\"number\"\n                    step=\"0.01\"\n                    value={editingPlank.price}\n                    onChange={(e) => setEditingPlank({...editingPlank, price: parseFloat(e.target.value) || 0})}\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                  />\n                </div>\n                \n                <div>\n                  <label className=\"block text-sm font-medium text-gray-700 mb-1\">Quantité max</label>\n                  <input\n                    type=\"number\"\n                    value={editingPlank.maxQuantity || ''}\n                    onChange={(e) => setEditingPlank({...editingPlank, maxQuantity: e.target.value ? parseInt(e.target.value) : null})}\n                    className=\"w-full p-2 border border-gray-300 rounded-md\"\n                    placeholder=\"Illimité\"\n                  />\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex justify-end gap-2 mt-6\">\n              <button\n                onClick={() => setEditingPlank(null)}\n                className=\"px-4 py-2 text-gray-600 hover:bg-gray-100 rounded-md flex items-center gap-2\"\n              >\n                <X className=\"w-4 h-4\" />\n                Annuler\n              </button>\n              <button\n                onClick={savePlank}\n                className=\"px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center gap-2\"\n              >\n                <Save className=\"w-4 h-4\" />\n                Sauvegarder\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Résultats */}\n      {results && (\n        <div className=\"space-y-6\">\n          <div className=\"bg-green-100 p-4 rounded-lg\">\n            <h3 className=\"font-semibold text-green-800 mb-2 flex items-center gap-2\">\n              <Euro className=\"w-5 h-5\" />\n              Résultat de l'optimisation\n            </h3>\n            <div className=\"grid md:grid-cols-3 gap-4\">\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-green-600\">\n                  {results.totalCost.toFixed(2)}€\n                </div>\n                <div className=\"text-sm text-gray-600\">Coût total</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-blue-600\">\n                  {results.totalPlanks}\n                </div>\n                <div className=\"text-sm text-gray-600\">Grandes planches</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"text-2xl font-bold text-purple-600\">\n                  {pieces.filter(p => p.width && p.height).length - results.remainingPieces.length}\n                </div>\n                <div className=\"text-sm text-gray-600\">Pièces placées</div>\n              </div>\n            </div>\n          </div>\n\n          {/* Récapitulatif des planches à commander */}\n          <div className=\"bg-blue-50 p-4 rounded-lg\">\n            <h3 className=\"font-semibold text-blue-800 mb-3 flex items-center gap-2\">\n              <Package className=\"w-5 h-5\" />\n              Récapitulatif des planches à commander\n            </h3>\n            <div className=\"space-y-2\">\n              {largePlanks.map(plank => {\n                const count = results.solution.filter(s => s.plankType.id === plank.id).length;\n                if (count > 0) {\n                  return (\n                    <div key={plank.id} className=\"flex justify-between items-center p-2 bg-white rounded border\">\n                      <div>\n                        <span className=\"font-medium\">{generatePlankName(plank.width, plank.height)}</span>\n                        <span className=\"text-sm text-gray-600 ml-2\">({plank.width}×{plank.height}mm)</span>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold text-blue-600\">\n                          {count} planche{count > 1 ? 's' : ''}\n                        </div>\n                        <div className=\"text-sm text-gray-600\">\n                          {count} × {plank.price}€ = {(count * plank.price).toFixed(2)}€\n                        </div>\n                      </div>\n                    </div>\n                  );\n                }\n                return null;\n              })}\n              <div className=\"border-t pt-2 mt-3\">\n                <div className=\"flex justify-between items-center font-bold text-lg\">\n                  <span>Total à commander :</span>\n                  <span className=\"text-blue-600\">{results.totalCost.toFixed(2)}€</span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Plan de découpe */}\n          <div>\n            <h3 className=\"font-semibold text-gray-800 mb-4\">Plan de découpe détaillé</h3>\n            <div className=\"space-y-4\">\n              {results.solution.map((item, index) => (\n                <PlankVisualization\n                  key={index}\n                  plankType={item.plankType}\n                  arrangement={item.arrangement}\n                />\n              ))}\n            </div>\n          </div>\n\n          {/* Détail de l'utilisation */}\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\n            <h3 className=\"font-semibold text-gray-800 mb-3\">Détail de l'utilisation</h3>\n            {largePlanks.map(plank => {\n              const plankUsages = results.solution.filter(s => s.plankType.id === plank.id);\n              if (plankUsages.length > 0) {\n                return (\n                  <div key={plank.id} className=\"mb-3\">\n                    <div className=\"font-medium text-gray-700 mb-1\">\n                      {generatePlankName(plank.width, plank.height)} ({plankUsages.length}/{plank.maxQuantity || '∞'}) :\n                    </div>\n                    {plankUsages.map((usage, index) => (\n                      <div key={index} className=\"ml-4 text-sm text-gray-600\">\n                        Planche {index + 1}: {usage.arrangement.pieces.length} pièce{usage.arrangement.pieces.length > 1 ? 's' : ''} \n                        ({usage.arrangement.pieces.map(p => p.name).join(', ')}) - \n                        Efficacité: {(usage.arrangement.efficiency * 100).toFixed(1)}%\n                      </div>\n                    ))}\n                  </div>\n                );\n              }\n              return null;\n            })}\n          </div>\n\n          {results.remainingPieces.length > 0 && (\n            <div className=\"bg-red-50 p-4 rounded-lg\">\n              <h3 className=\"font-semibold text-red-800 mb-2\">\n                Pièces non placées ({results.remainingPieces.length})\n              </h3>\n              <div className=\"text-sm text-red-600\">\n                {results.remainingPieces.map(piece => piece.name).join(', ')}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WoodCuttingOptimizer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}